<?php
/**
 * SystemRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Agave\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Agave Platform Science API
 *
 * Power your digital lab and reduce the time from theory to discovery using the Agave Science-as-a-Service API Platform. Agave provides hosted services that allow researchers to manage data, conduct experiments, and publish and share results from anywhere at any time.
 *
 * OpenAPI spec version: 2.2.14
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Agave\Client\Model;

use \ArrayAccess;
use \Agave\Client\ObjectSerializer;

/**
 * SystemRequest Class Doc Comment
 *
 * @category Class
 * @package  Agave\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SystemRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SystemRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'description' => 'string',
        'environment' => 'string',
        'execution_type' => '\Agave\Client\Model\SystemExecutionType',
        'id' => 'string',
        'login' => '\Agave\Client\Model\SystemLoginConfig',
        'max_system_jobs' => 'int',
        'max_system_jobs_per_user' => 'int',
        'name' => 'string',
        'queues' => '\Agave\Client\Model\BatchQueue[]',
        'scheduler' => '\Agave\Client\Model\BatchSchedulerType',
        'scratch_dir' => 'string',
        'site' => 'string',
        'startup_script' => 'string',
        'status' => '\Agave\Client\Model\SystemStatusType',
        'storage' => '\Agave\Client\Model\SystemStorageConfig',
        'type' => '\Agave\Client\Model\SystemType',
        'work_dir' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'description' => null,
        'environment' => null,
        'execution_type' => null,
        'id' => null,
        'login' => null,
        'max_system_jobs' => 'int64',
        'max_system_jobs_per_user' => 'int64',
        'name' => null,
        'queues' => null,
        'scheduler' => null,
        'scratch_dir' => null,
        'site' => null,
        'startup_script' => null,
        'status' => null,
        'storage' => null,
        'type' => null,
        'work_dir' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
        'environment' => 'environment',
        'execution_type' => 'executionType',
        'id' => 'id',
        'login' => 'login',
        'max_system_jobs' => 'maxSystemJobs',
        'max_system_jobs_per_user' => 'maxSystemJobsPerUser',
        'name' => 'name',
        'queues' => 'queues',
        'scheduler' => 'scheduler',
        'scratch_dir' => 'scratchDir',
        'site' => 'site',
        'startup_script' => 'startupScript',
        'status' => 'status',
        'storage' => 'storage',
        'type' => 'type',
        'work_dir' => 'workDir'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'environment' => 'setEnvironment',
        'execution_type' => 'setExecutionType',
        'id' => 'setId',
        'login' => 'setLogin',
        'max_system_jobs' => 'setMaxSystemJobs',
        'max_system_jobs_per_user' => 'setMaxSystemJobsPerUser',
        'name' => 'setName',
        'queues' => 'setQueues',
        'scheduler' => 'setScheduler',
        'scratch_dir' => 'setScratchDir',
        'site' => 'setSite',
        'startup_script' => 'setStartupScript',
        'status' => 'setStatus',
        'storage' => 'setStorage',
        'type' => 'setType',
        'work_dir' => 'setWorkDir'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'environment' => 'getEnvironment',
        'execution_type' => 'getExecutionType',
        'id' => 'getId',
        'login' => 'getLogin',
        'max_system_jobs' => 'getMaxSystemJobs',
        'max_system_jobs_per_user' => 'getMaxSystemJobsPerUser',
        'name' => 'getName',
        'queues' => 'getQueues',
        'scheduler' => 'getScheduler',
        'scratch_dir' => 'getScratchDir',
        'site' => 'getSite',
        'startup_script' => 'getStartupScript',
        'status' => 'getStatus',
        'storage' => 'getStorage',
        'type' => 'getType',
        'work_dir' => 'getWorkDir'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['environment'] = isset($data['environment']) ? $data['environment'] : null;
        $this->container['execution_type'] = isset($data['execution_type']) ? $data['execution_type'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['login'] = isset($data['login']) ? $data['login'] : null;
        $this->container['max_system_jobs'] = isset($data['max_system_jobs']) ? $data['max_system_jobs'] : null;
        $this->container['max_system_jobs_per_user'] = isset($data['max_system_jobs_per_user']) ? $data['max_system_jobs_per_user'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['queues'] = isset($data['queues']) ? $data['queues'] : null;
        $this->container['scheduler'] = isset($data['scheduler']) ? $data['scheduler'] : null;
        $this->container['scratch_dir'] = isset($data['scratch_dir']) ? $data['scratch_dir'] : null;
        $this->container['site'] = isset($data['site']) ? $data['site'] : null;
        $this->container['startup_script'] = isset($data['startup_script']) ? $data['startup_script'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['storage'] = isset($data['storage']) ? $data['storage'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['work_dir'] = isset($data['work_dir']) ? $data['work_dir'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['storage'] === null) {
            $invalidProperties[] = "'storage' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Verbose description of this system.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets environment
     *
     * @return string
     */
    public function getEnvironment()
    {
        return $this->container['environment'];
    }

    /**
     * Sets environment
     *
     * @param string $environment Environment variables to set upon login prior to job submission.
     *
     * @return $this
     */
    public function setEnvironment($environment)
    {
        $this->container['environment'] = $environment;

        return $this;
    }

    /**
     * Gets execution_type
     *
     * @return \Agave\Client\Model\SystemExecutionType
     */
    public function getExecutionType()
    {
        return $this->container['execution_type'];
    }

    /**
     * Sets execution_type
     *
     * @param \Agave\Client\Model\SystemExecutionType $execution_type execution_type
     *
     * @return $this
     */
    public function setExecutionType($execution_type)
    {
        $this->container['execution_type'] = $execution_type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique identifier for this system.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets login
     *
     * @return \Agave\Client\Model\SystemLoginConfig
     */
    public function getLogin()
    {
        return $this->container['login'];
    }

    /**
     * Sets login
     *
     * @param \Agave\Client\Model\SystemLoginConfig $login login
     *
     * @return $this
     */
    public function setLogin($login)
    {
        $this->container['login'] = $login;

        return $this;
    }

    /**
     * Gets max_system_jobs
     *
     * @return int
     */
    public function getMaxSystemJobs()
    {
        return $this->container['max_system_jobs'];
    }

    /**
     * Sets max_system_jobs
     *
     * @param int $max_system_jobs The maximum number of jobs that can be simultaneously run on the system across all queues.
     *
     * @return $this
     */
    public function setMaxSystemJobs($max_system_jobs)
    {
        $this->container['max_system_jobs'] = $max_system_jobs;

        return $this;
    }

    /**
     * Gets max_system_jobs_per_user
     *
     * @return int
     */
    public function getMaxSystemJobsPerUser()
    {
        return $this->container['max_system_jobs_per_user'];
    }

    /**
     * Sets max_system_jobs_per_user
     *
     * @param int $max_system_jobs_per_user The maximum number of jobs that can be simultaneously run on the system across all queues by a single user.
     *
     * @return $this
     */
    public function setMaxSystemJobsPerUser($max_system_jobs_per_user)
    {
        $this->container['max_system_jobs_per_user'] = $max_system_jobs_per_user;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Common name for this system.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets queues
     *
     * @return \Agave\Client\Model\BatchQueue[]
     */
    public function getQueues()
    {
        return $this->container['queues'];
    }

    /**
     * Sets queues
     *
     * @param \Agave\Client\Model\BatchQueue[] $queues The execution paradigm used to run jobs on this system.
     *
     * @return $this
     */
    public function setQueues($queues)
    {
        $this->container['queues'] = $queues;

        return $this;
    }

    /**
     * Gets scheduler
     *
     * @return \Agave\Client\Model\BatchSchedulerType
     */
    public function getScheduler()
    {
        return $this->container['scheduler'];
    }

    /**
     * Sets scheduler
     *
     * @param \Agave\Client\Model\BatchSchedulerType $scheduler scheduler
     *
     * @return $this
     */
    public function setScheduler($scheduler)
    {
        $this->container['scheduler'] = $scheduler;

        return $this;
    }

    /**
     * Gets scratch_dir
     *
     * @return string
     */
    public function getScratchDir()
    {
        return $this->container['scratch_dir'];
    }

    /**
     * Sets scratch_dir
     *
     * @param string $scratch_dir The scratch directory where job execution directories will be created at runtime. The workDir is used if this is not specified.
     *
     * @return $this
     */
    public function setScratchDir($scratch_dir)
    {
        $this->container['scratch_dir'] = $scratch_dir;

        return $this;
    }

    /**
     * Gets site
     *
     * @return string
     */
    public function getSite()
    {
        return $this->container['site'];
    }

    /**
     * Sets site
     *
     * @param string $site The site associated with this system.
     *
     * @return $this
     */
    public function setSite($site)
    {
        $this->container['site'] = $site;

        return $this;
    }

    /**
     * Gets startup_script
     *
     * @return string
     */
    public function getStartupScript()
    {
        return $this->container['startup_script'];
    }

    /**
     * Sets startup_script
     *
     * @param string $startup_script Script to be run after login and prior to execution.
     *
     * @return $this
     */
    public function setStartupScript($startup_script)
    {
        $this->container['startup_script'] = $startup_script;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Agave\Client\Model\SystemStatusType
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Agave\Client\Model\SystemStatusType $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets storage
     *
     * @return \Agave\Client\Model\SystemStorageConfig
     */
    public function getStorage()
    {
        return $this->container['storage'];
    }

    /**
     * Sets storage
     *
     * @param \Agave\Client\Model\SystemStorageConfig $storage storage
     *
     * @return $this
     */
    public function setStorage($storage)
    {
        $this->container['storage'] = $storage;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Agave\Client\Model\SystemType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Agave\Client\Model\SystemType $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets work_dir
     *
     * @return string
     */
    public function getWorkDir()
    {
        return $this->container['work_dir'];
    }

    /**
     * Sets work_dir
     *
     * @param string $work_dir The work directory where job execution directories will be created at runtime. This is used if scratchDir is not specified. If neither are specified, the job directory will be created in the system homeDir.
     *
     * @return $this
     */
    public function setWorkDir($work_dir)
    {
        $this->container['work_dir'] = $work_dir;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


