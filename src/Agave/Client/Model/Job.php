<?php
/**
 * Job
 *
 * PHP version 5
 *
 * @category Class
 * @package  Agave\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Agave Platform Science API
 *
 * Power your digital lab and reduce the time from theory to discovery using the Agave Science-as-a-Service API Platform. Agave provides hosted services that allow researchers to manage data, conduct experiments, and publish and share results from anywhere at any time.
 *
 * OpenAPI spec version: 2.2.14
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Agave\Client\Model;

use \ArrayAccess;
use \Agave\Client\ObjectSerializer;

/**
 * Job Class Doc Comment
 *
 * @category Class
 * @package  Agave\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Job implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Job';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'app_id' => 'string',
        'archive' => 'bool',
        'archive_path' => 'string',
        'archive_system' => 'string',
        'batch_queue' => 'string',
        'end_time' => '\DateTime',
        'execution_system' => 'string',
        'id' => 'int',
        'inputs' => '\Agave\Client\Model\JobInputs',
        'local_id' => 'string',
        'memory_per_node' => 'string',
        'message' => 'string',
        'name' => 'string',
        'node_count' => 'int',
        'notifications' => '\Agave\Client\Model\Notification[]',
        'output_path' => 'string',
        'owner' => 'string',
        'parameters' => '\Agave\Client\Model\JobParameters',
        'processors_per_node' => 'int',
        'max_run_time' => 'string',
        'retries' => 'int',
        'start_time' => '\DateTime',
        'status' => 'string',
        'submit_time' => '\DateTime',
        'work_path' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'app_id' => null,
        'archive' => null,
        'archive_path' => null,
        'archive_system' => null,
        'batch_queue' => null,
        'end_time' => 'date-time',
        'execution_system' => null,
        'id' => 'int64',
        'inputs' => null,
        'local_id' => null,
        'memory_per_node' => null,
        'message' => null,
        'name' => null,
        'node_count' => 'int64',
        'notifications' => null,
        'output_path' => null,
        'owner' => null,
        'parameters' => null,
        'processors_per_node' => 'int64',
        'max_run_time' => null,
        'retries' => 'int64',
        'start_time' => 'date-time',
        'status' => null,
        'submit_time' => 'date-time',
        'work_path' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'app_id' => 'appId',
        'archive' => 'archive',
        'archive_path' => 'archivePath',
        'archive_system' => 'archiveSystem',
        'batch_queue' => 'batchQueue',
        'end_time' => 'endTime',
        'execution_system' => 'executionSystem',
        'id' => 'id',
        'inputs' => 'inputs',
        'local_id' => 'localId',
        'memory_per_node' => 'memoryPerNode',
        'message' => 'message',
        'name' => 'name',
        'node_count' => 'nodeCount',
        'notifications' => 'notifications',
        'output_path' => 'outputPath',
        'owner' => 'owner',
        'parameters' => 'parameters',
        'processors_per_node' => 'processorsPerNode',
        'max_run_time' => 'maxRunTime',
        'retries' => 'retries',
        'start_time' => 'startTime',
        'status' => 'status',
        'submit_time' => 'submitTime',
        'work_path' => 'workPath'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'app_id' => 'setAppId',
        'archive' => 'setArchive',
        'archive_path' => 'setArchivePath',
        'archive_system' => 'setArchiveSystem',
        'batch_queue' => 'setBatchQueue',
        'end_time' => 'setEndTime',
        'execution_system' => 'setExecutionSystem',
        'id' => 'setId',
        'inputs' => 'setInputs',
        'local_id' => 'setLocalId',
        'memory_per_node' => 'setMemoryPerNode',
        'message' => 'setMessage',
        'name' => 'setName',
        'node_count' => 'setNodeCount',
        'notifications' => 'setNotifications',
        'output_path' => 'setOutputPath',
        'owner' => 'setOwner',
        'parameters' => 'setParameters',
        'processors_per_node' => 'setProcessorsPerNode',
        'max_run_time' => 'setMaxRunTime',
        'retries' => 'setRetries',
        'start_time' => 'setStartTime',
        'status' => 'setStatus',
        'submit_time' => 'setSubmitTime',
        'work_path' => 'setWorkPath'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'app_id' => 'getAppId',
        'archive' => 'getArchive',
        'archive_path' => 'getArchivePath',
        'archive_system' => 'getArchiveSystem',
        'batch_queue' => 'getBatchQueue',
        'end_time' => 'getEndTime',
        'execution_system' => 'getExecutionSystem',
        'id' => 'getId',
        'inputs' => 'getInputs',
        'local_id' => 'getLocalId',
        'memory_per_node' => 'getMemoryPerNode',
        'message' => 'getMessage',
        'name' => 'getName',
        'node_count' => 'getNodeCount',
        'notifications' => 'getNotifications',
        'output_path' => 'getOutputPath',
        'owner' => 'getOwner',
        'parameters' => 'getParameters',
        'processors_per_node' => 'getProcessorsPerNode',
        'max_run_time' => 'getMaxRunTime',
        'retries' => 'getRetries',
        'start_time' => 'getStartTime',
        'status' => 'getStatus',
        'submit_time' => 'getSubmitTime',
        'work_path' => 'getWorkPath'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['app_id'] = isset($data['app_id']) ? $data['app_id'] : null;
        $this->container['archive'] = isset($data['archive']) ? $data['archive'] : null;
        $this->container['archive_path'] = isset($data['archive_path']) ? $data['archive_path'] : null;
        $this->container['archive_system'] = isset($data['archive_system']) ? $data['archive_system'] : null;
        $this->container['batch_queue'] = isset($data['batch_queue']) ? $data['batch_queue'] : null;
        $this->container['end_time'] = isset($data['end_time']) ? $data['end_time'] : null;
        $this->container['execution_system'] = isset($data['execution_system']) ? $data['execution_system'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['inputs'] = isset($data['inputs']) ? $data['inputs'] : null;
        $this->container['local_id'] = isset($data['local_id']) ? $data['local_id'] : null;
        $this->container['memory_per_node'] = isset($data['memory_per_node']) ? $data['memory_per_node'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['node_count'] = isset($data['node_count']) ? $data['node_count'] : null;
        $this->container['notifications'] = isset($data['notifications']) ? $data['notifications'] : null;
        $this->container['output_path'] = isset($data['output_path']) ? $data['output_path'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['parameters'] = isset($data['parameters']) ? $data['parameters'] : null;
        $this->container['processors_per_node'] = isset($data['processors_per_node']) ? $data['processors_per_node'] : null;
        $this->container['max_run_time'] = isset($data['max_run_time']) ? $data['max_run_time'] : null;
        $this->container['retries'] = isset($data['retries']) ? $data['retries'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['submit_time'] = isset($data['submit_time']) ? $data['submit_time'] : null;
        $this->container['work_path'] = isset($data['work_path']) ? $data['work_path'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['app_id'] === null) {
            $invalidProperties[] = "'app_id' can't be null";
        }
        if ($this->container['archive'] === null) {
            $invalidProperties[] = "'archive' can't be null";
        }
        if ($this->container['archive_path'] === null) {
            $invalidProperties[] = "'archive_path' can't be null";
        }
        if ($this->container['archive_system'] === null) {
            $invalidProperties[] = "'archive_system' can't be null";
        }
        if ($this->container['batch_queue'] === null) {
            $invalidProperties[] = "'batch_queue' can't be null";
        }
        if ($this->container['end_time'] === null) {
            $invalidProperties[] = "'end_time' can't be null";
        }
        if ($this->container['execution_system'] === null) {
            $invalidProperties[] = "'execution_system' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['inputs'] === null) {
            $invalidProperties[] = "'inputs' can't be null";
        }
        if ($this->container['local_id'] === null) {
            $invalidProperties[] = "'local_id' can't be null";
        }
        if ($this->container['memory_per_node'] === null) {
            $invalidProperties[] = "'memory_per_node' can't be null";
        }
        if ($this->container['message'] === null) {
            $invalidProperties[] = "'message' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['node_count'] === null) {
            $invalidProperties[] = "'node_count' can't be null";
        }
        if ($this->container['notifications'] === null) {
            $invalidProperties[] = "'notifications' can't be null";
        }
        if ($this->container['output_path'] === null) {
            $invalidProperties[] = "'output_path' can't be null";
        }
        if ($this->container['owner'] === null) {
            $invalidProperties[] = "'owner' can't be null";
        }
        if ($this->container['parameters'] === null) {
            $invalidProperties[] = "'parameters' can't be null";
        }
        if ($this->container['processors_per_node'] === null) {
            $invalidProperties[] = "'processors_per_node' can't be null";
        }
        if ($this->container['max_run_time'] === null) {
            $invalidProperties[] = "'max_run_time' can't be null";
        }
        if ($this->container['retries'] === null) {
            $invalidProperties[] = "'retries' can't be null";
        }
        if ($this->container['start_time'] === null) {
            $invalidProperties[] = "'start_time' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['submit_time'] === null) {
            $invalidProperties[] = "'submit_time' can't be null";
        }
        if ($this->container['work_path'] === null) {
            $invalidProperties[] = "'work_path' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets app_id
     *
     * @return string
     */
    public function getAppId()
    {
        return $this->container['app_id'];
    }

    /**
     * Sets app_id
     *
     * @param string $app_id The unique name of the application being run by this job. This must be a valid application that the calling user has permission to run.
     *
     * @return $this
     */
    public function setAppId($app_id)
    {
        $this->container['app_id'] = $app_id;

        return $this;
    }

    /**
     * Gets archive
     *
     * @return bool
     */
    public function getArchive()
    {
        return $this->container['archive'];
    }

    /**
     * Sets archive
     *
     * @param bool $archive Whether the output from this job should be archived. If true, all new files created by this application's execution will be archived to the archivePath in the user's default storage system.
     *
     * @return $this
     */
    public function setArchive($archive)
    {
        $this->container['archive'] = $archive;

        return $this;
    }

    /**
     * Gets archive_path
     *
     * @return string
     */
    public function getArchivePath()
    {
        return $this->container['archive_path'];
    }

    /**
     * Sets archive_path
     *
     * @param string $archive_path The path of the archive folder for this job on default storage sytem of the user
     *
     * @return $this
     */
    public function setArchivePath($archive_path)
    {
        $this->container['archive_path'] = $archive_path;

        return $this;
    }

    /**
     * Gets archive_system
     *
     * @return string
     */
    public function getArchiveSystem()
    {
        return $this->container['archive_system'];
    }

    /**
     * Sets archive_system
     *
     * @param string $archive_system The unique id of the storage system on which this job output will be staged.
     *
     * @return $this
     */
    public function setArchiveSystem($archive_system)
    {
        $this->container['archive_system'] = $archive_system;

        return $this;
    }

    /**
     * Gets batch_queue
     *
     * @return string
     */
    public function getBatchQueue()
    {
        return $this->container['batch_queue'];
    }

    /**
     * Sets batch_queue
     *
     * @param string $batch_queue The queue to which this job should be submitted. This is optional and only applies when the execution system has a batch scheduler.
     *
     * @return $this
     */
    public function setBatchQueue($batch_queue)
    {
        $this->container['batch_queue'] = $batch_queue;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return \DateTime
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param \DateTime $end_time The date the job stopped running due to termination, completion, or error in ISO 8601 format.
     *
     * @return $this
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets execution_system
     *
     * @return string
     */
    public function getExecutionSystem()
    {
        return $this->container['execution_system'];
    }

    /**
     * Sets execution_system
     *
     * @param string $execution_system The system id of the execution system.
     *
     * @return $this
     */
    public function setExecutionSystem($execution_system)
    {
        $this->container['execution_system'] = $execution_system;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique id of the job.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets inputs
     *
     * @return \Agave\Client\Model\JobInputs
     */
    public function getInputs()
    {
        return $this->container['inputs'];
    }

    /**
     * Sets inputs
     *
     * @param \Agave\Client\Model\JobInputs $inputs inputs
     *
     * @return $this
     */
    public function setInputs($inputs)
    {
        $this->container['inputs'] = $inputs;

        return $this;
    }

    /**
     * Gets local_id
     *
     * @return string
     */
    public function getLocalId()
    {
        return $this->container['local_id'];
    }

    /**
     * Sets local_id
     *
     * @param string $local_id The process or local job id of the job on the remote execution system.
     *
     * @return $this
     */
    public function setLocalId($local_id)
    {
        $this->container['local_id'] = $local_id;

        return $this;
    }

    /**
     * Gets memory_per_node
     *
     * @return string
     */
    public function getMemoryPerNode()
    {
        return $this->container['memory_per_node'];
    }

    /**
     * Sets memory_per_node
     *
     * @param string $memory_per_node The requested memory for this application to run given in GB.
     *
     * @return $this
     */
    public function setMemoryPerNode($memory_per_node)
    {
        $this->container['memory_per_node'] = $memory_per_node;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message The error message incurred when the job failed.
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the job.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets node_count
     *
     * @return int
     */
    public function getNodeCount()
    {
        return $this->container['node_count'];
    }

    /**
     * Sets node_count
     *
     * @param int $node_count The number of processors this application should utilize while running. If the application is not of executionType PARALLEL, this should be 1.
     *
     * @return $this
     */
    public function setNodeCount($node_count)
    {
        $this->container['node_count'] = $node_count;

        return $this;
    }

    /**
     * Gets notifications
     *
     * @return \Agave\Client\Model\Notification[]
     */
    public function getNotifications()
    {
        return $this->container['notifications'];
    }

    /**
     * Sets notifications
     *
     * @param \Agave\Client\Model\Notification[] $notifications An array of notifications you wish to receive.
     *
     * @return $this
     */
    public function setNotifications($notifications)
    {
        $this->container['notifications'] = $notifications;

        return $this;
    }

    /**
     * Gets output_path
     *
     * @return string
     */
    public function getOutputPath()
    {
        return $this->container['output_path'];
    }

    /**
     * Sets output_path
     *
     * @param string $output_path Relative path of the job output data.
     *
     * @return $this
     */
    public function setOutputPath($output_path)
    {
        $this->container['output_path'] = $output_path;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string $owner The job owner.
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets parameters
     *
     * @return \Agave\Client\Model\JobParameters
     */
    public function getParameters()
    {
        return $this->container['parameters'];
    }

    /**
     * Sets parameters
     *
     * @param \Agave\Client\Model\JobParameters $parameters parameters
     *
     * @return $this
     */
    public function setParameters($parameters)
    {
        $this->container['parameters'] = $parameters;

        return $this;
    }

    /**
     * Gets processors_per_node
     *
     * @return int
     */
    public function getProcessorsPerNode()
    {
        return $this->container['processors_per_node'];
    }

    /**
     * Sets processors_per_node
     *
     * @param int $processors_per_node The number of processors this application should utilize while running. If the application is not of executionType PARALLEL, this should be 1.
     *
     * @return $this
     */
    public function setProcessorsPerNode($processors_per_node)
    {
        $this->container['processors_per_node'] = $processors_per_node;

        return $this;
    }

    /**
     * Gets max_run_time
     *
     * @return string
     */
    public function getMaxRunTime()
    {
        return $this->container['max_run_time'];
    }

    /**
     * Sets max_run_time
     *
     * @param string $max_run_time The requested compute time needed for this application to complete given in HH:mm:ss format.
     *
     * @return $this
     */
    public function setMaxRunTime($max_run_time)
    {
        $this->container['max_run_time'] = $max_run_time;

        return $this;
    }

    /**
     * Gets retries
     *
     * @return int
     */
    public function getRetries()
    {
        return $this->container['retries'];
    }

    /**
     * Sets retries
     *
     * @param int $retries The number of retires it took to submit this job.
     *
     * @return $this
     */
    public function setRetries($retries)
    {
        $this->container['retries'] = $retries;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return \DateTime
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param \DateTime $start_time The date the job started in ISO 8601 format.
     *
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The status of the job. Possible values are: PENDING, STAGING_INPUTS, CLEANING_UP, ARCHIVING, STAGING_JOB, FINISHED, KILLED, FAILED, STOPPED, RUNNING, PAUSED, QUEUED, SUBMITTING, STAGED, PROCESSING_INPUTS, ARCHIVING_FINISHED, ARCHIVING_FAILED
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets submit_time
     *
     * @return \DateTime
     */
    public function getSubmitTime()
    {
        return $this->container['submit_time'];
    }

    /**
     * Sets submit_time
     *
     * @param \DateTime $submit_time The date the job was submitted in ISO 8601 format.
     *
     * @return $this
     */
    public function setSubmitTime($submit_time)
    {
        $this->container['submit_time'] = $submit_time;

        return $this;
    }

    /**
     * Gets work_path
     *
     * @return string
     */
    public function getWorkPath()
    {
        return $this->container['work_path'];
    }

    /**
     * Sets work_path
     *
     * @param string $work_path The directory on the remote execution system from which the job is running.
     *
     * @return $this
     */
    public function setWorkPath($work_path)
    {
        $this->container['work_path'] = $work_path;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


