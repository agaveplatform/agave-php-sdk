<?php
/**
 * SystemStorageConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  Agave\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Agave Platform Science API
 *
 * Power your digital lab and reduce the time from theory to discovery using the Agave Science-as-a-Service API Platform. Agave provides hosted services that allow researchers to manage data, conduct experiments, and publish and share results from anywhere at any time.
 *
 * OpenAPI spec version: 2.2.14
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Agave\Client\Model;

use \ArrayAccess;
use \Agave\Client\ObjectSerializer;

/**
 * SystemStorageConfig Class Doc Comment
 *
 * @category Class
 * @package  Agave\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SystemStorageConfig implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SystemStorageConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'auth' => '\Agave\Client\Model\SystemAuthConfig',
        'container_name' => 'string',
        'home_dir' => 'string',
        'host' => 'string',
        'port' => 'int',
        'mirror' => 'bool',
        'protocol' => '\Agave\Client\Model\SystemStorageProtocolType',
        'public_apps_dir' => 'string',
        'resource' => 'string',
        'root_dir' => 'string',
        'zone' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'auth' => null,
        'container_name' => null,
        'home_dir' => null,
        'host' => null,
        'port' => 'int64',
        'mirror' => null,
        'protocol' => null,
        'public_apps_dir' => null,
        'resource' => null,
        'root_dir' => null,
        'zone' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auth' => 'auth',
        'container_name' => 'containerName',
        'home_dir' => 'homeDir',
        'host' => 'host',
        'port' => 'port',
        'mirror' => 'mirror',
        'protocol' => 'protocol',
        'public_apps_dir' => 'publicAppsDir',
        'resource' => 'resource',
        'root_dir' => 'rootDir',
        'zone' => 'zone'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auth' => 'setAuth',
        'container_name' => 'setContainerName',
        'home_dir' => 'setHomeDir',
        'host' => 'setHost',
        'port' => 'setPort',
        'mirror' => 'setMirror',
        'protocol' => 'setProtocol',
        'public_apps_dir' => 'setPublicAppsDir',
        'resource' => 'setResource',
        'root_dir' => 'setRootDir',
        'zone' => 'setZone'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auth' => 'getAuth',
        'container_name' => 'getContainerName',
        'home_dir' => 'getHomeDir',
        'host' => 'getHost',
        'port' => 'getPort',
        'mirror' => 'getMirror',
        'protocol' => 'getProtocol',
        'public_apps_dir' => 'getPublicAppsDir',
        'resource' => 'getResource',
        'root_dir' => 'getRootDir',
        'zone' => 'getZone'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['auth'] = isset($data['auth']) ? $data['auth'] : null;
        $this->container['container_name'] = isset($data['container_name']) ? $data['container_name'] : null;
        $this->container['home_dir'] = isset($data['home_dir']) ? $data['home_dir'] : '/';
        $this->container['host'] = isset($data['host']) ? $data['host'] : null;
        $this->container['port'] = isset($data['port']) ? $data['port'] : null;
        $this->container['mirror'] = isset($data['mirror']) ? $data['mirror'] : false;
        $this->container['protocol'] = isset($data['protocol']) ? $data['protocol'] : null;
        $this->container['public_apps_dir'] = isset($data['public_apps_dir']) ? $data['public_apps_dir'] : null;
        $this->container['resource'] = isset($data['resource']) ? $data['resource'] : null;
        $this->container['root_dir'] = isset($data['root_dir']) ? $data['root_dir'] : '/';
        $this->container['zone'] = isset($data['zone']) ? $data['zone'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['auth'] === null) {
            $invalidProperties[] = "'auth' can't be null";
        }
        if ($this->container['host'] === null) {
            $invalidProperties[] = "'host' can't be null";
        }
        if ($this->container['port'] === null) {
            $invalidProperties[] = "'port' can't be null";
        }
        if ($this->container['protocol'] === null) {
            $invalidProperties[] = "'protocol' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auth
     *
     * @return \Agave\Client\Model\SystemAuthConfig
     */
    public function getAuth()
    {
        return $this->container['auth'];
    }

    /**
     * Sets auth
     *
     * @param \Agave\Client\Model\SystemAuthConfig $auth auth
     *
     * @return $this
     */
    public function setAuth($auth)
    {
        $this->container['auth'] = $auth;

        return $this;
    }

    /**
     * Gets container_name
     *
     * @return string
     */
    public function getContainerName()
    {
        return $this->container['container_name'];
    }

    /**
     * Sets container_name
     *
     * @param string $container_name The name of the bucket to interact with when using an object store.
     *
     * @return $this
     */
    public function setContainerName($container_name)
    {
        $this->container['container_name'] = $container_name;

        return $this;
    }

    /**
     * Gets home_dir
     *
     * @return string
     */
    public function getHomeDir()
    {
        return $this->container['home_dir'];
    }

    /**
     * Sets home_dir
     *
     * @param string $home_dir The path on the remote system to use as the home directory for all API requests. For cases where the home directory should be dynamically defined, the ${USERNAME} token can be included in the homeDir value to represent the username of the authenticated user. ex. /home/${USERNAME}.
     *
     * @return $this
     */
    public function setHomeDir($home_dir)
    {
        $this->container['home_dir'] = $home_dir;

        return $this;
    }

    /**
     * Gets host
     *
     * @return string
     */
    public function getHost()
    {
        return $this->container['host'];
    }

    /**
     * Sets host
     *
     * @param string $host The hostname or ip address of the storage server
     *
     * @return $this
     */
    public function setHost($host)
    {
        $this->container['host'] = $host;

        return $this;
    }

    /**
     * Gets port
     *
     * @return int
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param int $port The port number of the storage server.
     *
     * @return $this
     */
    public function setPort($port)
    {
        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets mirror
     *
     * @return bool
     */
    public function getMirror()
    {
        return $this->container['mirror'];
    }

    /**
     * Sets mirror
     *
     * @param bool $mirror Whether the permissions set on the server should be pushed to the storage system itself. This only applies to IRODS and AWS systems.
     *
     * @return $this
     */
    public function setMirror($mirror)
    {
        $this->container['mirror'] = $mirror;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return \Agave\Client\Model\SystemStorageProtocolType
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param \Agave\Client\Model\SystemStorageProtocolType $protocol protocol
     *
     * @return $this
     */
    public function setProtocol($protocol)
    {
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets public_apps_dir
     *
     * @return string
     */
    public function getPublicAppsDir()
    {
        return $this->container['public_apps_dir'];
    }

    /**
     * Sets public_apps_dir
     *
     * @param string $public_apps_dir The path on the remote system where apps will be stored if this is set as the default public storage system.
     *
     * @return $this
     */
    public function setPublicAppsDir($public_apps_dir)
    {
        $this->container['public_apps_dir'] = $public_apps_dir;

        return $this;
    }

    /**
     * Gets resource
     *
     * @return string
     */
    public function getResource()
    {
        return $this->container['resource'];
    }

    /**
     * Sets resource
     *
     * @param string $resource The name of the target resource when defining an IRODS system.
     *
     * @return $this
     */
    public function setResource($resource)
    {
        $this->container['resource'] = $resource;

        return $this;
    }

    /**
     * Gets root_dir
     *
     * @return string
     */
    public function getRootDir()
    {
        return $this->container['root_dir'];
    }

    /**
     * Sets root_dir
     *
     * @param string $root_dir The path on the remote system to use as the root for all API requests.
     *
     * @return $this
     */
    public function setRootDir($root_dir)
    {
        $this->container['root_dir'] = $root_dir;

        return $this;
    }

    /**
     * Gets zone
     *
     * @return string
     */
    public function getZone()
    {
        return $this->container['zone'];
    }

    /**
     * Sets zone
     *
     * @param string $zone The name of the zone when defining an IRODS system.
     *
     * @return $this
     */
    public function setZone($zone)
    {
        $this->container['zone'] = $zone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


