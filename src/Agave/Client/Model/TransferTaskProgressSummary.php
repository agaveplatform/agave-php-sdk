<?php
/**
 * TransferTaskProgressSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  Agave\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Agave Platform Science API
 *
 * Power your digital lab and reduce the time from theory to discovery using the Agave Science-as-a-Service API Platform. Agave provides hosted services that allow researchers to manage data, conduct experiments, and publish and share results from anywhere at any time.
 *
 * OpenAPI spec version: 2.2.14
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Agave\Client\Model;

use \ArrayAccess;
use \Agave\Client\ObjectSerializer;

/**
 * TransferTaskProgressSummary Class Doc Comment
 *
 * @category Class
 * @description This represents a rollup of a data transfer operation.
 * @package  Agave\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransferTaskProgressSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TransferTaskProgressSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'average_rate' => 'int',
        'source' => 'string',
        'total_active_transfers' => 'int',
        'total_bytes' => 'int',
        'total_bytes_transferred' => 'int',
        'total_files' => 'int',
        'uuid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'average_rate' => 'int64',
        'source' => null,
        'total_active_transfers' => 'int64',
        'total_bytes' => 'int64',
        'total_bytes_transferred' => 'int64',
        'total_files' => 'int64',
        'uuid' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'average_rate' => 'averageRate',
        'source' => 'source',
        'total_active_transfers' => 'totalActiveTransfers',
        'total_bytes' => 'totalBytes',
        'total_bytes_transferred' => 'totalBytesTransferred',
        'total_files' => 'totalFiles',
        'uuid' => 'uuid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'average_rate' => 'setAverageRate',
        'source' => 'setSource',
        'total_active_transfers' => 'setTotalActiveTransfers',
        'total_bytes' => 'setTotalBytes',
        'total_bytes_transferred' => 'setTotalBytesTransferred',
        'total_files' => 'setTotalFiles',
        'uuid' => 'setUuid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'average_rate' => 'getAverageRate',
        'source' => 'getSource',
        'total_active_transfers' => 'getTotalActiveTransfers',
        'total_bytes' => 'getTotalBytes',
        'total_bytes_transferred' => 'getTotalBytesTransferred',
        'total_files' => 'getTotalFiles',
        'uuid' => 'getUuid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['average_rate'] = isset($data['average_rate']) ? $data['average_rate'] : 0;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['total_active_transfers'] = isset($data['total_active_transfers']) ? $data['total_active_transfers'] : 0;
        $this->container['total_bytes'] = isset($data['total_bytes']) ? $data['total_bytes'] : 0;
        $this->container['total_bytes_transferred'] = isset($data['total_bytes_transferred']) ? $data['total_bytes_transferred'] : 0;
        $this->container['total_files'] = isset($data['total_files']) ? $data['total_files'] : 0;
        $this->container['uuid'] = isset($data['uuid']) ? $data['uuid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['average_rate'] === null) {
            $invalidProperties[] = "'average_rate' can't be null";
        }
        if ($this->container['source'] === null) {
            $invalidProperties[] = "'source' can't be null";
        }
        if ($this->container['total_active_transfers'] === null) {
            $invalidProperties[] = "'total_active_transfers' can't be null";
        }
        if ($this->container['total_bytes'] === null) {
            $invalidProperties[] = "'total_bytes' can't be null";
        }
        if ($this->container['total_bytes_transferred'] === null) {
            $invalidProperties[] = "'total_bytes_transferred' can't be null";
        }
        if ($this->container['total_files'] === null) {
            $invalidProperties[] = "'total_files' can't be null";
        }
        if ($this->container['uuid'] === null) {
            $invalidProperties[] = "'uuid' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets average_rate
     *
     * @return int
     */
    public function getAverageRate()
    {
        return $this->container['average_rate'];
    }

    /**
     * Sets average_rate
     *
     * @param int $average_rate Average transfer rate in bytes/sec
     *
     * @return $this
     */
    public function setAverageRate($average_rate)
    {
        $this->container['average_rate'] = $average_rate;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source The source URL of the transfer operation
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets total_active_transfers
     *
     * @return int
     */
    public function getTotalActiveTransfers()
    {
        return $this->container['total_active_transfers'];
    }

    /**
     * Sets total_active_transfers
     *
     * @param int $total_active_transfers The number of concurrent transfers behind this transfer task
     *
     * @return $this
     */
    public function setTotalActiveTransfers($total_active_transfers)
    {
        $this->container['total_active_transfers'] = $total_active_transfers;

        return $this;
    }

    /**
     * Gets total_bytes
     *
     * @return int
     */
    public function getTotalBytes()
    {
        return $this->container['total_bytes'];
    }

    /**
     * Sets total_bytes
     *
     * @param int $total_bytes The total number of bytes to be transferred
     *
     * @return $this
     */
    public function setTotalBytes($total_bytes)
    {
        $this->container['total_bytes'] = $total_bytes;

        return $this;
    }

    /**
     * Gets total_bytes_transferred
     *
     * @return int
     */
    public function getTotalBytesTransferred()
    {
        return $this->container['total_bytes_transferred'];
    }

    /**
     * Sets total_bytes_transferred
     *
     * @param int $total_bytes_transferred The total number of bytes transferred thus far
     *
     * @return $this
     */
    public function setTotalBytesTransferred($total_bytes_transferred)
    {
        $this->container['total_bytes_transferred'] = $total_bytes_transferred;

        return $this;
    }

    /**
     * Gets total_files
     *
     * @return int
     */
    public function getTotalFiles()
    {
        return $this->container['total_files'];
    }

    /**
     * Sets total_files
     *
     * @param int $total_files The total number of files transferred to date
     *
     * @return $this
     */
    public function setTotalFiles($total_files)
    {
        $this->container['total_files'] = $total_files;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string $uuid The id of the transfer task associated with this object
     *
     * @return $this
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


