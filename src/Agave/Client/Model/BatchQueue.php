<?php
/**
 * BatchQueue
 *
 * PHP version 5
 *
 * @category Class
 * @package  Agave\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Agave Platform Science API
 *
 * Power your digital lab and reduce the time from theory to discovery using the Agave Science-as-a-Service API Platform. Agave provides hosted services that allow researchers to manage data, conduct experiments, and publish and share results from anywhere at any time.
 *
 * OpenAPI spec version: 2.2.14
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Agave\Client\Model;

use \ArrayAccess;
use \Agave\Client\ObjectSerializer;

/**
 * BatchQueue Class Doc Comment
 *
 * @category Class
 * @package  Agave\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BatchQueue implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BatchQueue';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'custom_directives' => 'string',
        'is_default' => 'bool',
        'max_jobs' => 'int',
        'max_user_jobs' => 'int',
        'max_nodes' => 'string',
        'max_memory_per_node' => 'string',
        'max_processors_per_node' => 'int',
        'max_requested_time' => 'string',
        'name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'custom_directives' => null,
        'is_default' => null,
        'max_jobs' => 'int64',
        'max_user_jobs' => 'int64',
        'max_nodes' => null,
        'max_memory_per_node' => null,
        'max_processors_per_node' => 'int64',
        'max_requested_time' => null,
        'name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'custom_directives' => 'customDirectives',
        'is_default' => 'isDefault',
        'max_jobs' => 'maxJobs',
        'max_user_jobs' => 'maxUserJobs',
        'max_nodes' => 'maxNodes',
        'max_memory_per_node' => 'maxMemoryPerNode',
        'max_processors_per_node' => 'maxProcessorsPerNode',
        'max_requested_time' => 'maxRequestedTime',
        'name' => 'name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'custom_directives' => 'setCustomDirectives',
        'is_default' => 'setIsDefault',
        'max_jobs' => 'setMaxJobs',
        'max_user_jobs' => 'setMaxUserJobs',
        'max_nodes' => 'setMaxNodes',
        'max_memory_per_node' => 'setMaxMemoryPerNode',
        'max_processors_per_node' => 'setMaxProcessorsPerNode',
        'max_requested_time' => 'setMaxRequestedTime',
        'name' => 'setName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'custom_directives' => 'getCustomDirectives',
        'is_default' => 'getIsDefault',
        'max_jobs' => 'getMaxJobs',
        'max_user_jobs' => 'getMaxUserJobs',
        'max_nodes' => 'getMaxNodes',
        'max_memory_per_node' => 'getMaxMemoryPerNode',
        'max_processors_per_node' => 'getMaxProcessorsPerNode',
        'max_requested_time' => 'getMaxRequestedTime',
        'name' => 'getName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['custom_directives'] = isset($data['custom_directives']) ? $data['custom_directives'] : null;
        $this->container['is_default'] = isset($data['is_default']) ? $data['is_default'] : null;
        $this->container['max_jobs'] = isset($data['max_jobs']) ? $data['max_jobs'] : null;
        $this->container['max_user_jobs'] = isset($data['max_user_jobs']) ? $data['max_user_jobs'] : null;
        $this->container['max_nodes'] = isset($data['max_nodes']) ? $data['max_nodes'] : null;
        $this->container['max_memory_per_node'] = isset($data['max_memory_per_node']) ? $data['max_memory_per_node'] : null;
        $this->container['max_processors_per_node'] = isset($data['max_processors_per_node']) ? $data['max_processors_per_node'] : null;
        $this->container['max_requested_time'] = isset($data['max_requested_time']) ? $data['max_requested_time'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['custom_directives'] === null) {
            $invalidProperties[] = "'custom_directives' can't be null";
        }
        if ($this->container['is_default'] === null) {
            $invalidProperties[] = "'is_default' can't be null";
        }
        if ($this->container['max_jobs'] === null) {
            $invalidProperties[] = "'max_jobs' can't be null";
        }
        if ($this->container['max_user_jobs'] === null) {
            $invalidProperties[] = "'max_user_jobs' can't be null";
        }
        if ($this->container['max_nodes'] === null) {
            $invalidProperties[] = "'max_nodes' can't be null";
        }
        if ($this->container['max_memory_per_node'] === null) {
            $invalidProperties[] = "'max_memory_per_node' can't be null";
        }
        if ($this->container['max_processors_per_node'] === null) {
            $invalidProperties[] = "'max_processors_per_node' can't be null";
        }
        if ($this->container['max_requested_time'] === null) {
            $invalidProperties[] = "'max_requested_time' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets custom_directives
     *
     * @return string
     */
    public function getCustomDirectives()
    {
        return $this->container['custom_directives'];
    }

    /**
     * Sets custom_directives
     *
     * @param string $custom_directives Any custom directives that should be appended to scheduler directives. ex. #$ -A TG-12345
     *
     * @return $this
     */
    public function setCustomDirectives($custom_directives)
    {
        $this->container['custom_directives'] = $custom_directives;

        return $this;
    }

    /**
     * Gets is_default
     *
     * @return bool
     */
    public function getIsDefault()
    {
        return $this->container['is_default'];
    }

    /**
     * Sets is_default
     *
     * @param bool $is_default Is this the default queue for the system.
     *
     * @return $this
     */
    public function setIsDefault($is_default)
    {
        $this->container['is_default'] = $is_default;

        return $this;
    }

    /**
     * Gets max_jobs
     *
     * @return int
     */
    public function getMaxJobs()
    {
        return $this->container['max_jobs'];
    }

    /**
     * Sets max_jobs
     *
     * @param int $max_jobs The maximum number of jobs that can be in queue at once.
     *
     * @return $this
     */
    public function setMaxJobs($max_jobs)
    {
        $this->container['max_jobs'] = $max_jobs;

        return $this;
    }

    /**
     * Gets max_user_jobs
     *
     * @return int
     */
    public function getMaxUserJobs()
    {
        return $this->container['max_user_jobs'];
    }

    /**
     * Sets max_user_jobs
     *
     * @param int $max_user_jobs The maximum number of jobs per user that can be in queue at once.
     *
     * @return $this
     */
    public function setMaxUserJobs($max_user_jobs)
    {
        $this->container['max_user_jobs'] = $max_user_jobs;

        return $this;
    }

    /**
     * Gets max_nodes
     *
     * @return string
     */
    public function getMaxNodes()
    {
        return $this->container['max_nodes'];
    }

    /**
     * Sets max_nodes
     *
     * @param string $max_nodes The max nodes available per node to jobs submitted to this queue.
     *
     * @return $this
     */
    public function setMaxNodes($max_nodes)
    {
        $this->container['max_nodes'] = $max_nodes;

        return $this;
    }

    /**
     * Gets max_memory_per_node
     *
     * @return string
     */
    public function getMaxMemoryPerNode()
    {
        return $this->container['max_memory_per_node'];
    }

    /**
     * Sets max_memory_per_node
     *
     * @param string $max_memory_per_node The max memory available per node to jobs submitted to this queue.
     *
     * @return $this
     */
    public function setMaxMemoryPerNode($max_memory_per_node)
    {
        $this->container['max_memory_per_node'] = $max_memory_per_node;

        return $this;
    }

    /**
     * Gets max_processors_per_node
     *
     * @return int
     */
    public function getMaxProcessorsPerNode()
    {
        return $this->container['max_processors_per_node'];
    }

    /**
     * Sets max_processors_per_node
     *
     * @param int $max_processors_per_node The max processors per node available to jobs submitted to this queue.
     *
     * @return $this
     */
    public function setMaxProcessorsPerNode($max_processors_per_node)
    {
        $this->container['max_processors_per_node'] = $max_processors_per_node;

        return $this;
    }

    /**
     * Gets max_requested_time
     *
     * @return string
     */
    public function getMaxRequestedTime()
    {
        return $this->container['max_requested_time'];
    }

    /**
     * Sets max_requested_time
     *
     * @param string $max_requested_time The max length of jobs submitted to this queue in hhh:mm:ss format.
     *
     * @return $this
     */
    public function setMaxRequestedTime($max_requested_time)
    {
        $this->container['max_requested_time'] = $max_requested_time;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the batch queue.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


