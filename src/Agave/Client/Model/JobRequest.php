<?php
/**
 * JobRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Agave\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Agave Platform Science API
 *
 * Power your digital lab and reduce the time from theory to discovery using the Agave Science-as-a-Service API Platform. Agave provides hosted services that allow researchers to manage data, conduct experiments, and publish and share results from anywhere at any time.
 *
 * OpenAPI spec version: 2.2.14
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Agave\Client\Model;

use \ArrayAccess;
use \Agave\Client\ObjectSerializer;

/**
 * JobRequest Class Doc Comment
 *
 * @category Class
 * @description A request to run a registered app.
 * @package  Agave\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class JobRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'JobRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'app_id' => 'string',
        'archive' => 'bool',
        'archive_path' => 'string',
        'archive_system' => 'string',
        'batch_queue' => 'string',
        'inputs' => 'object',
        'memory_per_node' => 'int',
        'name' => 'string',
        'node_count' => 'int',
        'notifications' => '\Agave\Client\Model\Notification[]',
        'parameters' => 'object',
        'processors_per_node' => 'int',
        'max_run_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'app_id' => null,
        'archive' => null,
        'archive_path' => null,
        'archive_system' => null,
        'batch_queue' => null,
        'inputs' => null,
        'memory_per_node' => 'int64',
        'name' => null,
        'node_count' => 'int64',
        'notifications' => null,
        'parameters' => null,
        'processors_per_node' => 'int64',
        'max_run_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'app_id' => 'appId',
        'archive' => 'archive',
        'archive_path' => 'archivePath',
        'archive_system' => 'archiveSystem',
        'batch_queue' => 'batchQueue',
        'inputs' => 'inputs',
        'memory_per_node' => 'memoryPerNode',
        'name' => 'name',
        'node_count' => 'nodeCount',
        'notifications' => 'notifications',
        'parameters' => 'parameters',
        'processors_per_node' => 'processorsPerNode',
        'max_run_time' => 'maxRunTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'app_id' => 'setAppId',
        'archive' => 'setArchive',
        'archive_path' => 'setArchivePath',
        'archive_system' => 'setArchiveSystem',
        'batch_queue' => 'setBatchQueue',
        'inputs' => 'setInputs',
        'memory_per_node' => 'setMemoryPerNode',
        'name' => 'setName',
        'node_count' => 'setNodeCount',
        'notifications' => 'setNotifications',
        'parameters' => 'setParameters',
        'processors_per_node' => 'setProcessorsPerNode',
        'max_run_time' => 'setMaxRunTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'app_id' => 'getAppId',
        'archive' => 'getArchive',
        'archive_path' => 'getArchivePath',
        'archive_system' => 'getArchiveSystem',
        'batch_queue' => 'getBatchQueue',
        'inputs' => 'getInputs',
        'memory_per_node' => 'getMemoryPerNode',
        'name' => 'getName',
        'node_count' => 'getNodeCount',
        'notifications' => 'getNotifications',
        'parameters' => 'getParameters',
        'processors_per_node' => 'getProcessorsPerNode',
        'max_run_time' => 'getMaxRunTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['app_id'] = isset($data['app_id']) ? $data['app_id'] : null;
        $this->container['archive'] = isset($data['archive']) ? $data['archive'] : true;
        $this->container['archive_path'] = isset($data['archive_path']) ? $data['archive_path'] : null;
        $this->container['archive_system'] = isset($data['archive_system']) ? $data['archive_system'] : null;
        $this->container['batch_queue'] = isset($data['batch_queue']) ? $data['batch_queue'] : null;
        $this->container['inputs'] = isset($data['inputs']) ? $data['inputs'] : null;
        $this->container['memory_per_node'] = isset($data['memory_per_node']) ? $data['memory_per_node'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['node_count'] = isset($data['node_count']) ? $data['node_count'] : null;
        $this->container['notifications'] = isset($data['notifications']) ? $data['notifications'] : null;
        $this->container['parameters'] = isset($data['parameters']) ? $data['parameters'] : null;
        $this->container['processors_per_node'] = isset($data['processors_per_node']) ? $data['processors_per_node'] : null;
        $this->container['max_run_time'] = isset($data['max_run_time']) ? $data['max_run_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['app_id'] === null) {
            $invalidProperties[] = "'app_id' can't be null";
        }
        if ($this->container['archive'] === null) {
            $invalidProperties[] = "'archive' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['notifications'] === null) {
            $invalidProperties[] = "'notifications' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets app_id
     *
     * @return string
     */
    public function getAppId()
    {
        return $this->container['app_id'];
    }

    /**
     * Sets app_id
     *
     * @param string $app_id The unique name of the application being run by this job. This must be a valid application that the calling user has permission to run.
     *
     * @return $this
     */
    public function setAppId($app_id)
    {
        $this->container['app_id'] = $app_id;

        return $this;
    }

    /**
     * Gets archive
     *
     * @return bool
     */
    public function getArchive()
    {
        return $this->container['archive'];
    }

    /**
     * Sets archive
     *
     * @param bool $archive Whether the output from this job should be archived. If true, all new files created by this application's execution will be archived to the archivePath in the user's default storage system.
     *
     * @return $this
     */
    public function setArchive($archive)
    {
        $this->container['archive'] = $archive;

        return $this;
    }

    /**
     * Gets archive_path
     *
     * @return string
     */
    public function getArchivePath()
    {
        return $this->container['archive_path'];
    }

    /**
     * Sets archive_path
     *
     * @param string $archive_path The path of the archive folder for this job on default storage sytem of the user
     *
     * @return $this
     */
    public function setArchivePath($archive_path)
    {
        $this->container['archive_path'] = $archive_path;

        return $this;
    }

    /**
     * Gets archive_system
     *
     * @return string
     */
    public function getArchiveSystem()
    {
        return $this->container['archive_system'];
    }

    /**
     * Sets archive_system
     *
     * @param string $archive_system The unique id of the storage system on which this job output will be staged.
     *
     * @return $this
     */
    public function setArchiveSystem($archive_system)
    {
        $this->container['archive_system'] = $archive_system;

        return $this;
    }

    /**
     * Gets batch_queue
     *
     * @return string
     */
    public function getBatchQueue()
    {
        return $this->container['batch_queue'];
    }

    /**
     * Sets batch_queue
     *
     * @param string $batch_queue The queue to which this job should be submitted. This is optional and only applies when the execution system has a batch scheduler.
     *
     * @return $this
     */
    public function setBatchQueue($batch_queue)
    {
        $this->container['batch_queue'] = $batch_queue;

        return $this;
    }

    /**
     * Gets inputs
     *
     * @return object
     */
    public function getInputs()
    {
        return $this->container['inputs'];
    }

    /**
     * Sets inputs
     *
     * @param object $inputs The application specific input files needed for this job. These vary from application to application and should be entered as multiple individual parameters in the form. Inputs may be given as relative paths in the user's default storage system or as URI. If a URI is given, the data will be staged in by the IO service and made avaialble to the application at run time.
     *
     * @return $this
     */
    public function setInputs($inputs)
    {
        $this->container['inputs'] = $inputs;

        return $this;
    }

    /**
     * Gets memory_per_node
     *
     * @return int
     */
    public function getMemoryPerNode()
    {
        return $this->container['memory_per_node'];
    }

    /**
     * Sets memory_per_node
     *
     * @param int $memory_per_node The requested memory for this application to run given in GB.
     *
     * @return $this
     */
    public function setMemoryPerNode($memory_per_node)
    {
        $this->container['memory_per_node'] = $memory_per_node;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the job.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets node_count
     *
     * @return int
     */
    public function getNodeCount()
    {
        return $this->container['node_count'];
    }

    /**
     * Sets node_count
     *
     * @param int $node_count The number of processors this application should utilize while running. If the application is not of executionType PARALLEL, this should be 1.
     *
     * @return $this
     */
    public function setNodeCount($node_count)
    {
        $this->container['node_count'] = $node_count;

        return $this;
    }

    /**
     * Gets notifications
     *
     * @return \Agave\Client\Model\Notification[]
     */
    public function getNotifications()
    {
        return $this->container['notifications'];
    }

    /**
     * Sets notifications
     *
     * @param \Agave\Client\Model\Notification[] $notifications An array of notifications you wish to receive.
     *
     * @return $this
     */
    public function setNotifications($notifications)
    {
        $this->container['notifications'] = $notifications;

        return $this;
    }

    /**
     * Gets parameters
     *
     * @return object
     */
    public function getParameters()
    {
        return $this->container['parameters'];
    }

    /**
     * Sets parameters
     *
     * @param object $parameters The application specific parameters needed for this job. These vary from application to application and should be entered as multiple individual parameters in the form. The actual dataType will be determined by the application description.
     *
     * @return $this
     */
    public function setParameters($parameters)
    {
        $this->container['parameters'] = $parameters;

        return $this;
    }

    /**
     * Gets processors_per_node
     *
     * @return int
     */
    public function getProcessorsPerNode()
    {
        return $this->container['processors_per_node'];
    }

    /**
     * Sets processors_per_node
     *
     * @param int $processors_per_node The number of processors this application should utilize while running. If the application is not of executionType PARALLEL, this should be 1.
     *
     * @return $this
     */
    public function setProcessorsPerNode($processors_per_node)
    {
        $this->container['processors_per_node'] = $processors_per_node;

        return $this;
    }

    /**
     * Gets max_run_time
     *
     * @return string
     */
    public function getMaxRunTime()
    {
        return $this->container['max_run_time'];
    }

    /**
     * Sets max_run_time
     *
     * @param string $max_run_time The requested compute time needed for this application to complete given in HH:mm:ss format.
     *
     * @return $this
     */
    public function setMaxRunTime($max_run_time)
    {
        $this->container['max_run_time'] = $max_run_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


