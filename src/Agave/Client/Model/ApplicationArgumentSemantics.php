<?php
/**
 * ApplicationArgumentSemantics
 *
 * PHP version 5
 *
 * @category Class
 * @package  Agave\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Agave Platform Science API
 *
 * Power your digital lab and reduce the time from theory to discovery using the Agave Science-as-a-Service API Platform. Agave provides hosted services that allow researchers to manage data, conduct experiments, and publish and share results from anywhere at any time.
 *
 * OpenAPI spec version: 2.2.14
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Agave\Client\Model;

use \ArrayAccess;
use \Agave\Client\ObjectSerializer;

/**
 * ApplicationArgumentSemantics Class Doc Comment
 *
 * @category Class
 * @description Describes the semantic definition of this input/output and the filetypes it represents. Multiple ontologies and values are supported. &lt;a href&#x3D;\&quot;http://agaveapi.co/documentation/tutorials/app-management-tutorial/#app-outputs\&quot;&gt;Read more.&lt;/a&gt;
 * @package  Agave\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ApplicationArgumentSemantics implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ApplicationArgumentSemantics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'file_types' => 'string[]',
        'max_cardinality' => 'int',
        'min_cardinality' => 'int',
        'ontology' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'file_types' => null,
        'max_cardinality' => 'int64',
        'min_cardinality' => 'int64',
        'ontology' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'file_types' => 'fileTypes',
        'max_cardinality' => 'maxCardinality',
        'min_cardinality' => 'minCardinality',
        'ontology' => 'ontology'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'file_types' => 'setFileTypes',
        'max_cardinality' => 'setMaxCardinality',
        'min_cardinality' => 'setMinCardinality',
        'ontology' => 'setOntology'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'file_types' => 'getFileTypes',
        'max_cardinality' => 'getMaxCardinality',
        'min_cardinality' => 'getMinCardinality',
        'ontology' => 'getOntology'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['file_types'] = isset($data['file_types']) ? $data['file_types'] : null;
        $this->container['max_cardinality'] = isset($data['max_cardinality']) ? $data['max_cardinality'] : null;
        $this->container['min_cardinality'] = isset($data['min_cardinality']) ? $data['min_cardinality'] : null;
        $this->container['ontology'] = isset($data['ontology']) ? $data['ontology'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['file_types'] === null) {
            $invalidProperties[] = "'file_types' can't be null";
        }
        if ($this->container['max_cardinality'] === null) {
            $invalidProperties[] = "'max_cardinality' can't be null";
        }
        if ($this->container['min_cardinality'] === null) {
            $invalidProperties[] = "'min_cardinality' can't be null";
        }
        if ($this->container['ontology'] === null) {
            $invalidProperties[] = "'ontology' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets file_types
     *
     * @return string[]
     */
    public function getFileTypes()
    {
        return $this->container['file_types'];
    }

    /**
     * Sets file_types
     *
     * @param string[] $file_types The file types acceptable for this output.
     *
     * @return $this
     */
    public function setFileTypes($file_types)
    {
        $this->container['file_types'] = $file_types;

        return $this;
    }

    /**
     * Gets max_cardinality
     *
     * @return int
     */
    public function getMaxCardinality()
    {
        return $this->container['max_cardinality'];
    }

    /**
     * Sets max_cardinality
     *
     * @param int $max_cardinality The maximum number of times this output may appear.
     *
     * @return $this
     */
    public function setMaxCardinality($max_cardinality)
    {
        $this->container['max_cardinality'] = $max_cardinality;

        return $this;
    }

    /**
     * Gets min_cardinality
     *
     * @return int
     */
    public function getMinCardinality()
    {
        return $this->container['min_cardinality'];
    }

    /**
     * Sets min_cardinality
     *
     * @param int $min_cardinality The minimum number of times this output may appear. -1 is unlimited
     *
     * @return $this
     */
    public function setMinCardinality($min_cardinality)
    {
        $this->container['min_cardinality'] = $min_cardinality;

        return $this;
    }

    /**
     * Gets ontology
     *
     * @return string[]
     */
    public function getOntology()
    {
        return $this->container['ontology'];
    }

    /**
     * Sets ontology
     *
     * @param string[] $ontology ontology
     *
     * @return $this
     */
    public function setOntology($ontology)
    {
        $this->container['ontology'] = $ontology;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


