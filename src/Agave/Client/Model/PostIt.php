<?php
/**
 * PostIt
 *
 * PHP version 5
 *
 * @category Class
 * @package  Agave\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Agave Platform Science API
 *
 * Power your digital lab and reduce the time from theory to discovery using the Agave Science-as-a-Service API Platform. Agave provides hosted services that allow researchers to manage data, conduct experiments, and publish and share results from anywhere at any time.
 *
 * OpenAPI spec version: 2.2.14
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Agave\Client\Model;

use \ArrayAccess;
use \Agave\Client\ObjectSerializer;

/**
 * PostIt Class Doc Comment
 *
 * @category Class
 * @package  Agave\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PostIt implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PostIt';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'created' => '\DateTime',
        'creator' => 'string',
        'expires' => '\DateTime',
        'internal_username' => 'string',
        'method' => 'string',
        'postit' => 'string',
        'remaining_uses' => 'int',
        'url' => 'string',
        'noauth' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'created' => 'date-time',
        'creator' => null,
        'expires' => 'date-time',
        'internal_username' => null,
        'method' => null,
        'postit' => null,
        'remaining_uses' => 'int64',
        'url' => null,
        'noauth' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created' => 'created',
        'creator' => 'creator',
        'expires' => 'expires',
        'internal_username' => 'internalUsername',
        'method' => 'method',
        'postit' => 'postit',
        'remaining_uses' => 'remainingUses',
        'url' => 'url',
        'noauth' => 'noauth'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created' => 'setCreated',
        'creator' => 'setCreator',
        'expires' => 'setExpires',
        'internal_username' => 'setInternalUsername',
        'method' => 'setMethod',
        'postit' => 'setPostit',
        'remaining_uses' => 'setRemainingUses',
        'url' => 'setUrl',
        'noauth' => 'setNoauth'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created' => 'getCreated',
        'creator' => 'getCreator',
        'expires' => 'getExpires',
        'internal_username' => 'getInternalUsername',
        'method' => 'getMethod',
        'postit' => 'getPostit',
        'remaining_uses' => 'getRemainingUses',
        'url' => 'getUrl',
        'noauth' => 'getNoauth'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['creator'] = isset($data['creator']) ? $data['creator'] : null;
        $this->container['expires'] = isset($data['expires']) ? $data['expires'] : null;
        $this->container['internal_username'] = isset($data['internal_username']) ? $data['internal_username'] : null;
        $this->container['method'] = isset($data['method']) ? $data['method'] : null;
        $this->container['postit'] = isset($data['postit']) ? $data['postit'] : null;
        $this->container['remaining_uses'] = isset($data['remaining_uses']) ? $data['remaining_uses'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['noauth'] = isset($data['noauth']) ? $data['noauth'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['creator'] === null) {
            $invalidProperties[] = "'creator' can't be null";
        }
        if ($this->container['expires'] === null) {
            $invalidProperties[] = "'expires' can't be null";
        }
        if ($this->container['internal_username'] === null) {
            $invalidProperties[] = "'internal_username' can't be null";
        }
        if ($this->container['method'] === null) {
            $invalidProperties[] = "'method' can't be null";
        }
        if ($this->container['postit'] === null) {
            $invalidProperties[] = "'postit' can't be null";
        }
        if ($this->container['remaining_uses'] === null) {
            $invalidProperties[] = "'remaining_uses' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['noauth'] === null) {
            $invalidProperties[] = "'noauth' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created The creation date in ISO 8601 format.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets creator
     *
     * @return string
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     *
     * @param string $creator The api user who made the PostIt creation request.
     *
     * @return $this
     */
    public function setCreator($creator)
    {
        $this->container['creator'] = $creator;

        return $this;
    }

    /**
     * Gets expires
     *
     * @return \DateTime
     */
    public function getExpires()
    {
        return $this->container['expires'];
    }

    /**
     * Sets expires
     *
     * @param \DateTime $expires The expiration date in ISO 8601 format.
     *
     * @return $this
     */
    public function setExpires($expires)
    {
        $this->container['expires'] = $expires;

        return $this;
    }

    /**
     * Gets internal_username
     *
     * @return string
     */
    public function getInternalUsername()
    {
        return $this->container['internal_username'];
    }

    /**
     * Sets internal_username
     *
     * @param string $internal_username The username of the internal user attached to this PostIt.
     *
     * @return $this
     */
    public function setInternalUsername($internal_username)
    {
        $this->container['internal_username'] = $internal_username;

        return $this;
    }

    /**
     * Gets method
     *
     * @return string
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param string $method The url that will be invoked when the PostIt is redeemed.
     *
     * @return $this
     */
    public function setMethod($method)
    {
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets postit
     *
     * @return string
     */
    public function getPostit()
    {
        return $this->container['postit'];
    }

    /**
     * Sets postit
     *
     * @param string $postit The PostIt nonce.
     *
     * @return $this
     */
    public function setPostit($postit)
    {
        $this->container['postit'] = $postit;

        return $this;
    }

    /**
     * Gets remaining_uses
     *
     * @return int
     */
    public function getRemainingUses()
    {
        return $this->container['remaining_uses'];
    }

    /**
     * Sets remaining_uses
     *
     * @param int $remaining_uses The number of invocations remaining on this token.
     *
     * @return $this
     */
    public function setRemainingUses($remaining_uses)
    {
        $this->container['remaining_uses'] = $remaining_uses;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The url that will be invoked when the PostIt is redeemed.
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets noauth
     *
     * @return bool
     */
    public function getNoauth()
    {
        return $this->container['noauth'];
    }

    /**
     * Sets noauth
     *
     * @param bool $noauth If true, the provided url will be called without authentication. Default is false
     *
     * @return $this
     */
    public function setNoauth($noauth)
    {
        $this->container['noauth'] = $noauth;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


