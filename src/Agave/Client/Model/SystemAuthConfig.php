<?php
/**
 * SystemAuthConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  Agave\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Agave Platform Science API
 *
 * Power your digital lab and reduce the time from theory to discovery using the Agave Science-as-a-Service API Platform. Agave provides hosted services that allow researchers to manage data, conduct experiments, and publish and share results from anywhere at any time.
 *
 * OpenAPI spec version: 2.2.14
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Agave\Client\Model;

use \ArrayAccess;
use \Agave\Client\ObjectSerializer;

/**
 * SystemAuthConfig Class Doc Comment
 *
 * @category Class
 * @package  Agave\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SystemAuthConfig implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SystemAuthConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'credential' => 'string',
        'internal_username' => 'string',
        'password' => 'string',
        'public_key' => 'string',
        'private_key' => 'string',
        'server' => '\Agave\Client\Model\SystemAuthConfigServer',
        'type' => '\Agave\Client\Model\SystemLoginAuthenticationType',
        'username' => 'string',
        'ca_certs' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'credential' => null,
        'internal_username' => null,
        'password' => null,
        'public_key' => null,
        'private_key' => null,
        'server' => null,
        'type' => null,
        'username' => null,
        'ca_certs' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'credential' => 'credential',
        'internal_username' => 'internalUsername',
        'password' => 'password',
        'public_key' => 'publicKey',
        'private_key' => 'privateKey',
        'server' => 'server',
        'type' => 'type',
        'username' => 'username',
        'ca_certs' => 'caCerts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'credential' => 'setCredential',
        'internal_username' => 'setInternalUsername',
        'password' => 'setPassword',
        'public_key' => 'setPublicKey',
        'private_key' => 'setPrivateKey',
        'server' => 'setServer',
        'type' => 'setType',
        'username' => 'setUsername',
        'ca_certs' => 'setCaCerts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'credential' => 'getCredential',
        'internal_username' => 'getInternalUsername',
        'password' => 'getPassword',
        'public_key' => 'getPublicKey',
        'private_key' => 'getPrivateKey',
        'server' => 'getServer',
        'type' => 'getType',
        'username' => 'getUsername',
        'ca_certs' => 'getCaCerts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['credential'] = isset($data['credential']) ? $data['credential'] : null;
        $this->container['internal_username'] = isset($data['internal_username']) ? $data['internal_username'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['public_key'] = isset($data['public_key']) ? $data['public_key'] : null;
        $this->container['private_key'] = isset($data['private_key']) ? $data['private_key'] : null;
        $this->container['server'] = isset($data['server']) ? $data['server'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['ca_certs'] = isset($data['ca_certs']) ? $data['ca_certs'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['credential'] === null) {
            $invalidProperties[] = "'credential' can't be null";
        }
        if ($this->container['internal_username'] === null) {
            $invalidProperties[] = "'internal_username' can't be null";
        }
        if ($this->container['password'] === null) {
            $invalidProperties[] = "'password' can't be null";
        }
        if ($this->container['public_key'] === null) {
            $invalidProperties[] = "'public_key' can't be null";
        }
        if ($this->container['private_key'] === null) {
            $invalidProperties[] = "'private_key' can't be null";
        }
        if ($this->container['server'] === null) {
            $invalidProperties[] = "'server' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['username'] === null) {
            $invalidProperties[] = "'username' can't be null";
        }
        if ($this->container['ca_certs'] === null) {
            $invalidProperties[] = "'ca_certs' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets credential
     *
     * @return string
     */
    public function getCredential()
    {
        return $this->container['credential'];
    }

    /**
     * Sets credential
     *
     * @param string $credential The credential used to authenticate to the remote system. Depending on the authentication protocol of the remote system, this could be an OAuth Token, X.509 certificate, Kerberose token, or an private key..
     *
     * @return $this
     */
    public function setCredential($credential)
    {
        $this->container['credential'] = $credential;

        return $this;
    }

    /**
     * Gets internal_username
     *
     * @return string
     */
    public function getInternalUsername()
    {
        return $this->container['internal_username'];
    }

    /**
     * Sets internal_username
     *
     * @param string $internal_username The username of the internal user associated with this credential.
     *
     * @return $this
     */
    public function setInternalUsername($internal_username)
    {
        $this->container['internal_username'] = $internal_username;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password The password on the remote system used to authenticate.
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets public_key
     *
     * @return string
     */
    public function getPublicKey()
    {
        return $this->container['public_key'];
    }

    /**
     * Sets public_key
     *
     * @param string $public_key The public ssh key used to authenticate to the remote system.
     *
     * @return $this
     */
    public function setPublicKey($public_key)
    {
        $this->container['public_key'] = $public_key;

        return $this;
    }

    /**
     * Gets private_key
     *
     * @return string
     */
    public function getPrivateKey()
    {
        return $this->container['private_key'];
    }

    /**
     * Sets private_key
     *
     * @param string $private_key The public ssh key used to authenticate to the remote system..
     *
     * @return $this
     */
    public function setPrivateKey($private_key)
    {
        $this->container['private_key'] = $private_key;

        return $this;
    }

    /**
     * Gets server
     *
     * @return \Agave\Client\Model\SystemAuthConfigServer
     */
    public function getServer()
    {
        return $this->container['server'];
    }

    /**
     * Sets server
     *
     * @param \Agave\Client\Model\SystemAuthConfigServer $server server
     *
     * @return $this
     */
    public function setServer($server)
    {
        $this->container['server'] = $server;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Agave\Client\Model\SystemLoginAuthenticationType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Agave\Client\Model\SystemLoginAuthenticationType $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username The local username on the remote system used to authenticate.
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets ca_certs
     *
     * @return string
     */
    public function getCaCerts()
    {
        return $this->container['ca_certs'];
    }

    /**
     * Sets ca_certs
     *
     * @param string $ca_certs A public URL to the location of the trusted CA certs to use with this credential.
     *
     * @return $this
     */
    public function setCaCerts($ca_certs)
    {
        $this->container['ca_certs'] = $ca_certs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


