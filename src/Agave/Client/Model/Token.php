<?php

/**
 * Token
 *
 * PHP version 5
 *
 * @category Class
 * @package  Agave\Client\Model
 * @author   Rion Dooley <deardooley@gmail.com>
 */

/**
 * Agave Platform Science API
 *
 * Power your digital lab and reduce the time from theory to discovery using the Agave Science-as-a-Service API Platform. Agave provides hosted services that allow researchers to manage data, conduct experiments, and publish and share results from anywhere at any time.
 *
 * OpenAPI spec version: 2.2.14
 *
 */

/**
 * NOTE: This is a custom class overlaid on the autogenerated swagger-codegen client code.
 */

namespace Agave\Client\Model;

use \ArrayAccess;
use \Agave\Client\ObjectSerializer;

/**
 * Model for a standard OAuth2 authentication response Token object.
 *
 * @category Class
 * @package  Agave\Client\Model
 * @author   Rion Dooley <deardooley@gmail.com>
 */
class Token implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Token';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accessToken' => 'string',
        'refreshToken' => 'string',
        'createdAt' => 'string',
        'expiresAt' => 'string',
        'expiresIn' => 'string',
        'scope' => 'string',
        'tokenType' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'accessToken' => 'string',
        'refreshToken' => 'string',
        'createdAt' => 'DateTime',
        'expiresAt' => 'DateTime',
        'expiresIn' => 'integer',
        'scope' => 'string',
        'tokenType' => 'string'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accessToken' => 'access_token',
        'refreshToken' => 'refresh_token',
        'createdAt' => 'created_at',
        'expiresAt' => 'expires_at',
        'expiresIn' => 'expires_in',
        'scope' => 'scope',
        'tokenType' => 'token_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accessToken' => 'setAccessToken',
        'refreshToken' => 'setRefreshToken',
        'createdAt' => 'setCreatedAt',
        'expiresAt' => 'setExpiresAt',
        'expiresIn' => 'setExpiresIn',
        'scope' => 'setScope',
        'tokenType' => 'setTokenType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accessToken' => 'getAccessToken',
        'refreshToken' => 'getRefreshToken',
        'createdAt' => 'getCreatedAt',
        'expiresAt' => 'getExpiresAt',
        'expiresIn' => 'getExpiresIn',
        'scope' => 'getScope',
        'tokenType' => 'getTokenType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accessToken'] = isset($data['accessToken']) ?
            $data['accessToken'] : (isset($data['access_token']) ?
                $data['access_token'] : (isset($data['AGAVE_ACCESS_TOKEN']) ?
                    $data['AGAVE_ACCESS_TOKEN'] : null));

        $this->container['refreshToken'] = isset($data['refreshToken']) ?
            $data['refreshToken'] : (isset($data['refresh_token']) ?
                $data['refresh_token'] : (isset($data['AGAVE_REFRESH_TOKEN']) ?
                    $data['AGAVE_REFRESH_TOKEN'] : null));

        $this->container['createdAt'] = isset($data['createdAt']) ?
            $data['createdAt'] : (isset($data['created_at']) ?
                $data['created_at'] : null);

        $this->container['expiresAt'] = isset($data['expiresAt']) ?
            $data['expiresAt'] : (isset($data['expires_at']) ?
                $data['expires_at'] : null);

        $this->container['tokenType'] = isset($data['tokenType']) ?
            $data['tokenType'] : (isset($data['token_type']) ?
                $data['token_type'] : null);

        $this->container['expiresIn'] = isset($data['expiresIn']) ?
            $data['expiresIn'] : (isset($data['expires_in']) ?
                $data['expires_in'] : null);

        $this->container['scope'] = isset($data['scope']) ? $data['scope'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['accessToken'] === null) {
            $invalidProperties[] = "'accessToken' can't be null";
        }
        if ($this->container['refreshToken'] === null) {
            $invalidProperties[] = "'refreshToken' can't be null";
        }
        if ($this->container['createdAt'] === null) {
            $invalidProperties[] = "'createdAt' can't be null";
        }
        if ($this->container['expiresAt'] === null) {
            $invalidProperties[] = "'expiresAt' can't be null";
        }
        if ($this->container['scope'] === null) {
            $invalidProperties[] = "'scope' can't be null";
        }
        if ($this->container['expiresIn'] === null) {
            $invalidProperties[] = "'expiresIn' can't be null";
        }
        if ($this->container['tokenType'] === null) {
            $invalidProperties[] = "'tokenType' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets access_token
     *
     * @return string
     */
    public function getAccessToken()
    {
        return $this->container['accessToken'];
    }

    /**
     * Sets access_token
     *
     * @param string $accessToken The oauth2 access token
     *
     * @return $this
     */
    public function setAccessToken($accessToken)
    {
        $this->container['accessToken'] = $accessToken;

        return $this;
    }

    /**
     * Gets refresh_token
     *
     * @return string
     */
    public function getRefreshToken()
    {
        return $this->container['refreshToken'];
    }

    /**
     * Sets refresh_token
     *
     * @param string $refreshToken The oauth2 refresh token
     *
     * @return $this
     */
    public function setRefreshToken($refreshToken)
    {
        $this->container['refreshToken'] = $refreshToken;

        return $this;
    }

    /**
     * @return string
     */
    public function getExpiresAt()
    {
        return $this->container['expiresAt'];
    }

    /**
     * @param string $expiresAt
     * @return Token
     */
    public function setExpiresAt($expiresAt)
    {
        $this->container['expiresAt'] = $expiresAt;
        return $this;
    }

    /**
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * @param string $createdAt
     * @return Token
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;
        return $this;
    }

    /**
     * @return string
     */
    public function getExpiresIn()
    {
        return $this->container['expiresIn'];
    }

    /**
     * @param string $expiresIn
     * @return Token
     */
    public function setExpiresIn($expiresIn)
    {
        $this->container['expiresIn'] = $expiresIn;
        return $this;
    }

    /**
     * @return string
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * @param string $scope
     * @return Token
     */
    public function setScope($scope)
    {
        $this->container['scope'] = $scope;
        return $this;
    }

    /**
     * @return string
     */
    public function getTokenType()
    {
        return $this->container['tokenType'];
    }

    /**
     * @param string $tokenType
     * @return Token
     */
    public function setTokenType($tokenType)
    {
        $this->container['tokenType'] = $tokenType;
        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function toArray()
    {
        return $this->container;
    }
}


