<?php
/**
 * TokensApi
 * PHP version 5
 *
 * @category Class
 * @package  Agave\Client\API
 * @author   Rion Dooley <deardooley@gmail.com>
 */

/**
 * Agave Platform Science API
 *
 * Power your digital lab and reduce the time from theory to discovery using the Agave Science-as-a-Service API Platform. Agave provides hosted services that allow researchers to manage data, conduct experiments, and publish and share results from anywhere at any time.
 *
 * OpenAPI spec version: 2.2.14
 */

/**
 * NOTE: This is a custom class overlaid on the autogenerated swagger-codegen client code.
 */

namespace Agave\Client\API;

use Agave\Client\Model\EmptyClientResponse;
use Agave\Client\Model\EmptyTokenResponse;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Agave\Client\ApiException;
use Agave\Client\Configuration;
use Agave\Client\HeaderSelector;
use Agave\Client\ObjectSerializer;

/**
 * TokensApi Class
 *
 * Custom client for carrying out OAuth2 token password flow, token refresh, and revocation. This will not walk web-based
 * OAuth2 flows. See the OAuth2 library from the League for a full implementation.
 *
 * @category Class
 * @package  Agave\Client
 * @author   Rion Dooley <deardooley@gmail.com>
 */
class TokensApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param Configuration   $config
     * @param ClientInterface $client
     * @param HeaderSelector  $selector
     */
    public function __construct(
        Configuration $config = null,
        ClientInterface $client = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation create
     *
     * @param  string $username The username for which to request a token
     * @param  string $password The password to authenticate the token request
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Agave\Client\Model\SingleClientResponse
     */
    public function create($username = null, $password = null)
    {
        list($response) = $this->createWithHttpInfo($username, $password);
        return $response;
    }

    /**
     * Operation createWithHttpInfo
     *
     * @param  string $username The username for which to request a token
     * @param  string $password The password to authenticate the token request
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Agave\Client\Model\SingleClientResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createWithHttpInfo($username = null, $password = null)
    {
        $returnType = '\Agave\Client\Model\Token';
        $request = $this->createRequest($username, $password);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Agave\Client\Model\AgaveResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAsync
     *
     * 
     *
     * @param  string $username The username for which to request a token
     * @param  string $password The password to authenticate the token request
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAsync($username = null, $password = null)
    {
        return $this->createAsyncWithHttpInfo($username, $password)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $username The username for which to request a token
     * @param  string $password The password to authenticate the token request
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAsyncWithHttpInfo($username = null, $password = null)
    {
        $returnType = '\Agave\Client\Model\Token';
        $request = $this->createRequest($username, $password);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'create'
     *
     * @param  string $username The username for which to request a token
     * @param  string $password The password to authenticate the token request
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createRequest($username = null, $password = null)
    {
        if ($username == null && $password == null) {
            // verify the required parameter 'body' is set
            if ($this->config->getUsername() === null) {
                throw new \InvalidArgumentException(
                    'Missing the required parameter $username when calling create'
                );
            }
            else {
                $username = $this->config->getUsername();
            }

            // verify the required parameter 'body' is set
            if ($this->config->getPassword() === null) {
                throw new \InvalidArgumentException(
                    'Missing the required parameter $password when calling create'
                );
            }
            else {
                $password = $this->config->getPassword();
            }
        }
        else {
            // verify the required parameter 'body' is set
            if ($username === null) {
                throw new \InvalidArgumentException(
                    'Missing the required parameter $username when calling create'
                );
            }

            // verify the required parameter 'body' is set
            if ($password === null) {
                throw new \InvalidArgumentException(
                    'Missing the required parameter $password when calling create'
                );
            }
        }

        $resourcePath = '/token';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );


        // $_tempBody is the method argument, if present
        $httpBody = \GuzzleHttp\Psr7\build_query([
            "username" => $username,
            "password" => $password,
            "grant_type=password",
            "scope=PRODUCTION"
        ]);

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getAuthCache()->getApikey() .
                    ":" . $this->config->getAuthCache()->getApisecret());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    /**
     * Operation refresh
     *
     * @param  string $refreshToken The refresh token with which to request a new auth token. Defaults to the refresh token in the client config
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Agave\Client\Model\SingleClientResponse
     */
    public function refresh($refreshToken = null)
    {
        list($response) = $this->refreshWithHttpInfo($refreshToken);
        return $response;
    }

    /**
     * Operation refreshWithHttpInfo
     *
     * @param  string $refreshToken The refresh token with which to request a new auth token. Defaults to the refresh token in the client config
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Agave\Client\Model\SingleClientResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function refreshWithHttpInfo($refreshToken = null)
    {
        $returnType = '\Agave\Client\Model\RefreshToken';
        $request = $this->refreshRequest($refreshToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Agave\Client\Model\AgaveResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation refreshAsync
     *
     *
     *
     * @param  string $refreshToken The refresh token with which to request a new auth token. Defaults to the refresh token in the client config
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refreshAsync($refreshToken = null)
    {
        return $this->refreshAsyncWithHttpInfo($refreshToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation refreshAsyncWithHttpInfo
     *
     *
     *
     * @param  string $refreshToken The refresh token with which to request a new auth token. Defaults to the refresh token in the client config
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refreshAsyncWithHttpInfo($refreshToken = null)
    {
        $returnType = '\Agave\Client\Model\RefreshToken';
        $request = $this->refreshRequest($refreshToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'refresh'
     *
     * @param  string $refreshToken The refresh token with which to request a new auth token. Defaults to the refresh token in the client config
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function refreshRequest($refreshToken = null)
    {
        // verify the required parameter 'refreshToken' is set
        if ($refreshToken == null ) {
            if ($this->config->getRefreshToken() === null) {
                throw new \InvalidArgumentException(
                    'Missing an refresh token when calling refresg'
                );
            }
            else {
                $refreshToken = $this->config->getRefreshToken();
            }
        }


        $resourcePath = '/token';
        $queryParams = [];
        $headerParams = [];

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/x-www-form-urlencoded']
        );

        // $_tempBody is the method argument, if present
        $httpBody = \GuzzleHttp\Psr7\build_query([
            "grant_type=refresh_token",
            "refresh_token" => $refreshToken,
            "scope=PRODUCTION"
        ]);

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getAuthCache()->getApikey() .
                    ":" . $this->config->getAuthCache()->getApisecret());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    /**
     * Operation revoke
     *
     * @param  string $accessToken The access token to revoke. Defaults to the access token in the client config
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Agave\Client\Model\EmptyClientResponse
     */
    public function revoke($accessToken)
    {
        list($response) = $this->revokeWithHttpInfo($accessToken);
        return $response;
    }

    /**
     * Operation revokeWithHttpInfo
     *
     * @param  string $accessToken The access token to revoke. Defaults to the access token in the client config
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Agave\Client\Model\EmptyClientResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function revokeWithHttpInfo($accessToken)
    {
        $returnType = '\Agave\Client\Model\EmptyTokenResponse';
        $request = $this->revokeRequest($accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                new EmptyTokenResponse(['status'=>'success']),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Agave\Client\Model\EmptyClientResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation revokeAsync
     *
     * 
     *
     * @param  string $accessToken The access token to revoke. Defaults to the access token in the client config
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function revokeAsync($accessToken = null)
    {
        return $this->revokeAsyncWithHttpInfo($accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation revokeAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $accessToken The access token to revoke. Defaults to the access token in the client config
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function revokeAsyncWithHttpInfo($accessToken)
    {
        $returnType = '\Agave\Client\Model\EmptyTokenResponse';
        $request = $this->revokeRequest($accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return new EmptyTokenResponse(['status'=>'success']);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'revoke'
     *
     * @param  string $accessToken The access token to revoke. Defaults to the access token in the client config
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function revokeRequest($accessToken = null)
    {
        // verify the required parameter 'accessToken' is set
        if ($accessToken == null ) {
            if ($this->config->getAccessToken() === null) {
                throw new \InvalidArgumentException(
                    'Missing an access token when calling revoke'
                );
            }
            else {
                $accessToken = $this->config->getAccessToken();
            }
        }

        $resourcePath = '/token';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        $httpBody = \GuzzleHttp\Psr7\build_query(['token' => $accessToken]);

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
