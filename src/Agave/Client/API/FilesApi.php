<?php
/**
 * FilesApi
 * PHP version 5
 *
 * @category Class
 * @package  Agave\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Agave Platform Science API
 *
 * Power your digital lab and reduce the time from theory to discovery using the Agave Science-as-a-Service API Platform. Agave provides hosted services that allow researchers to manage data, conduct experiments, and publish and share results from anywhere at any time.
 *
 * OpenAPI spec version: 2.2.14
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Agave\Client\API;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Agave\Client\ApiException;
use Agave\Client\Configuration;
use Agave\Client\HeaderSelector;
use Agave\Client\ObjectSerializer;

/**
 * FilesApi Class Doc Comment
 *
 * @category Class
 * @package  Agave\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FilesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation clearFileItemPermissions
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  string $system_id The id of the system on which the file item lives. (required)
     * @param  bool $naked naked (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function clearFileItemPermissions($file_path, $system_id, $naked = 'true')
    {
        $this->clearFileItemPermissionsWithHttpInfo($file_path, $system_id, $naked);
    }

    /**
     * Operation clearFileItemPermissionsWithHttpInfo
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  string $system_id The id of the system on which the file item lives. (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function clearFileItemPermissionsWithHttpInfo($file_path, $system_id, $naked = 'true')
    {
        $returnType = '';
        $request = $this->clearFileItemPermissionsRequest($file_path, $system_id, $naked);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation clearFileItemPermissionsAsync
     *
     * 
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  string $system_id The id of the system on which the file item lives. (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clearFileItemPermissionsAsync($file_path, $system_id, $naked = 'true')
    {
        return $this->clearFileItemPermissionsAsyncWithHttpInfo($file_path, $system_id, $naked)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation clearFileItemPermissionsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  string $system_id The id of the system on which the file item lives. (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clearFileItemPermissionsAsyncWithHttpInfo($file_path, $system_id, $naked = 'true')
    {
        $returnType = '';
        $request = $this->clearFileItemPermissionsRequest($file_path, $system_id, $naked);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'clearFileItemPermissions'
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  string $system_id The id of the system on which the file item lives. (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function clearFileItemPermissionsRequest($file_path, $system_id, $naked = 'true')
    {
        // verify the required parameter 'file_path' is set
        if ($file_path === null || (is_array($file_path) && count($file_path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_path when calling clearFileItemPermissions'
            );
        }
        // verify the required parameter 'system_id' is set
        if ($system_id === null || (is_array($system_id) && count($system_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $system_id when calling clearFileItemPermissions'
            );
        }

        $resourcePath = '/files/v2/pems/system/{systemId}/{filePath}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }

        // path params
        if ($file_path !== null) {
            $resourcePath = str_replace(
                '{' . 'filePath' . '}',
                ObjectSerializer::toPathValue($file_path),
                $resourcePath
            );
        }
        // path params
        if ($system_id !== null) {
            $resourcePath = str_replace(
                '{' . 'systemId' . '}',
                ObjectSerializer::toPathValue($system_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteFileItem
     *
     * @param  string $system_id The unique id of the system on which the data resides. (required)
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  string $naked If true, the response wrapper is stripped and the raw object is returned (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteFileItem($system_id, $file_path, $naked = 'true')
    {
        $this->deleteFileItemWithHttpInfo($system_id, $file_path, $naked);
    }

    /**
     * Operation deleteFileItemWithHttpInfo
     *
     * @param  string $system_id The unique id of the system on which the data resides. (required)
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  string $naked If true, the response wrapper is stripped and the raw object is returned (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFileItemWithHttpInfo($system_id, $file_path, $naked = 'true')
    {
        $returnType = '';
        $request = $this->deleteFileItemRequest($system_id, $file_path, $naked);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteFileItemAsync
     *
     * 
     *
     * @param  string $system_id The unique id of the system on which the data resides. (required)
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  string $naked If true, the response wrapper is stripped and the raw object is returned (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFileItemAsync($system_id, $file_path, $naked = 'true')
    {
        return $this->deleteFileItemAsyncWithHttpInfo($system_id, $file_path, $naked)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteFileItemAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $system_id The unique id of the system on which the data resides. (required)
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  string $naked If true, the response wrapper is stripped and the raw object is returned (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFileItemAsyncWithHttpInfo($system_id, $file_path, $naked = 'true')
    {
        $returnType = '';
        $request = $this->deleteFileItemRequest($system_id, $file_path, $naked);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteFileItem'
     *
     * @param  string $system_id The unique id of the system on which the data resides. (required)
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  string $naked If true, the response wrapper is stripped and the raw object is returned (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteFileItemRequest($system_id, $file_path, $naked = 'true')
    {
        // verify the required parameter 'system_id' is set
        if ($system_id === null || (is_array($system_id) && count($system_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $system_id when calling deleteFileItem'
            );
        }
        // verify the required parameter 'file_path' is set
        if ($file_path === null || (is_array($file_path) && count($file_path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_path when calling deleteFileItem'
            );
        }

        $resourcePath = '/files/v2/media/system/{systemId}/{filePath}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }

        // path params
        if ($system_id !== null) {
            $resourcePath = str_replace(
                '{' . 'systemId' . '}',
                ObjectSerializer::toPathValue($system_id),
                $resourcePath
            );
        }
        // path params
        if ($file_path !== null) {
            $resourcePath = str_replace(
                '{' . 'filePath' . '}',
                ObjectSerializer::toPathValue($file_path),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteFileItemOnDefaultSystem
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  bool $naked naked (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteFileItemOnDefaultSystem($file_path, $naked = 'true')
    {
        $this->deleteFileItemOnDefaultSystemWithHttpInfo($file_path, $naked);
    }

    /**
     * Operation deleteFileItemOnDefaultSystemWithHttpInfo
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFileItemOnDefaultSystemWithHttpInfo($file_path, $naked = 'true')
    {
        $returnType = '';
        $request = $this->deleteFileItemOnDefaultSystemRequest($file_path, $naked);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteFileItemOnDefaultSystemAsync
     *
     * 
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFileItemOnDefaultSystemAsync($file_path, $naked = 'true')
    {
        return $this->deleteFileItemOnDefaultSystemAsyncWithHttpInfo($file_path, $naked)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteFileItemOnDefaultSystemAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFileItemOnDefaultSystemAsyncWithHttpInfo($file_path, $naked = 'true')
    {
        $returnType = '';
        $request = $this->deleteFileItemOnDefaultSystemRequest($file_path, $naked);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteFileItemOnDefaultSystem'
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteFileItemOnDefaultSystemRequest($file_path, $naked = 'true')
    {
        // verify the required parameter 'file_path' is set
        if ($file_path === null || (is_array($file_path) && count($file_path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_path when calling deleteFileItemOnDefaultSystem'
            );
        }

        $resourcePath = '/files/v2/media/{filePath}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }

        // path params
        if ($file_path !== null) {
            $resourcePath = str_replace(
                '{' . 'filePath' . '}',
                ObjectSerializer::toPathValue($file_path),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation downloadFileItem
     *
     * @param  string $system_id The unique id of the system on which the data resides. (required)
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  bool $force Boolean flag to indicate whether the Content-Disposition header should be set to force a browser download. (optional, default to false)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function downloadFileItem($system_id, $file_path, $force = 'false')
    {
        $this->downloadFileItemWithHttpInfo($system_id, $file_path, $force);
    }

    /**
     * Operation downloadFileItemWithHttpInfo
     *
     * @param  string $system_id The unique id of the system on which the data resides. (required)
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  bool $force Boolean flag to indicate whether the Content-Disposition header should be set to force a browser download. (optional, default to false)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadFileItemWithHttpInfo($system_id, $file_path, $force = 'false')
    {
        $returnType = '';
        $request = $this->downloadFileItemRequest($system_id, $file_path, $force);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation downloadFileItemAsync
     *
     * 
     *
     * @param  string $system_id The unique id of the system on which the data resides. (required)
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  bool $force Boolean flag to indicate whether the Content-Disposition header should be set to force a browser download. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadFileItemAsync($system_id, $file_path, $force = 'false')
    {
        return $this->downloadFileItemAsyncWithHttpInfo($system_id, $file_path, $force)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadFileItemAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $system_id The unique id of the system on which the data resides. (required)
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  bool $force Boolean flag to indicate whether the Content-Disposition header should be set to force a browser download. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadFileItemAsyncWithHttpInfo($system_id, $file_path, $force = 'false')
    {
        $returnType = '';
        $request = $this->downloadFileItemRequest($system_id, $file_path, $force);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'downloadFileItem'
     *
     * @param  string $system_id The unique id of the system on which the data resides. (required)
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  bool $force Boolean flag to indicate whether the Content-Disposition header should be set to force a browser download. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadFileItemRequest($system_id, $file_path, $force = 'false')
    {
        // verify the required parameter 'system_id' is set
        if ($system_id === null || (is_array($system_id) && count($system_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $system_id when calling downloadFileItem'
            );
        }
        // verify the required parameter 'file_path' is set
        if ($file_path === null || (is_array($file_path) && count($file_path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_path when calling downloadFileItem'
            );
        }

        $resourcePath = '/files/v2/media/system/{systemId}/{filePath}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($force !== null) {
            $queryParams['force'] = ObjectSerializer::toQueryValue($force);
        }

        // path params
        if ($system_id !== null) {
            $resourcePath = str_replace(
                '{' . 'systemId' . '}',
                ObjectSerializer::toPathValue($system_id),
                $resourcePath
            );
        }
        // path params
        if ($file_path !== null) {
            $resourcePath = str_replace(
                '{' . 'filePath' . '}',
                ObjectSerializer::toPathValue($file_path),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation downloadFileItemOnDefaultSystem
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user (required)
     * @param  bool $force Boolean flag to indicate whether the Content-Disposition header should be set to force browser file download. (optional, default to false)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function downloadFileItemOnDefaultSystem($file_path, $force = 'false')
    {
        $this->downloadFileItemOnDefaultSystemWithHttpInfo($file_path, $force);
    }

    /**
     * Operation downloadFileItemOnDefaultSystemWithHttpInfo
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user (required)
     * @param  bool $force Boolean flag to indicate whether the Content-Disposition header should be set to force browser file download. (optional, default to false)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadFileItemOnDefaultSystemWithHttpInfo($file_path, $force = 'false')
    {
        $returnType = '';
        $request = $this->downloadFileItemOnDefaultSystemRequest($file_path, $force);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation downloadFileItemOnDefaultSystemAsync
     *
     * 
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user (required)
     * @param  bool $force Boolean flag to indicate whether the Content-Disposition header should be set to force browser file download. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadFileItemOnDefaultSystemAsync($file_path, $force = 'false')
    {
        return $this->downloadFileItemOnDefaultSystemAsyncWithHttpInfo($file_path, $force)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadFileItemOnDefaultSystemAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user (required)
     * @param  bool $force Boolean flag to indicate whether the Content-Disposition header should be set to force browser file download. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadFileItemOnDefaultSystemAsyncWithHttpInfo($file_path, $force = 'false')
    {
        $returnType = '';
        $request = $this->downloadFileItemOnDefaultSystemRequest($file_path, $force);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'downloadFileItemOnDefaultSystem'
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user (required)
     * @param  bool $force Boolean flag to indicate whether the Content-Disposition header should be set to force browser file download. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadFileItemOnDefaultSystemRequest($file_path, $force = 'false')
    {
        // verify the required parameter 'file_path' is set
        if ($file_path === null || (is_array($file_path) && count($file_path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_path when calling downloadFileItemOnDefaultSystem'
            );
        }

        $resourcePath = '/files/v2/media/{filePath}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($force !== null) {
            $queryParams['force'] = ObjectSerializer::toQueryValue($force);
        }

        // path params
        if ($file_path !== null) {
            $resourcePath = str_replace(
                '{' . 'filePath' . '}',
                ObjectSerializer::toPathValue($file_path),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation importFileItem
     *
     * @param  string $system_id The id of the system. (required)
     * @param  string $file_path The relative or absolute path where the file item should be imported (required)
     * @param  \Agave\Client\Model\FileImportRequest $body The import request (required)
     * @param  bool $naked naked (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Agave\Client\Model\FileInfo
     */
    public function importFileItem($system_id, $file_path, $body, $naked = 'true')
    {
        list($response) = $this->importFileItemWithHttpInfo($system_id, $file_path, $body, $naked);
        return $response;
    }

    /**
     * Operation importFileItemWithHttpInfo
     *
     * @param  string $system_id The id of the system. (required)
     * @param  string $file_path The relative or absolute path where the file item should be imported (required)
     * @param  \Agave\Client\Model\FileImportRequest $body The import request (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Agave\Client\Model\FileInfo, HTTP status code, HTTP response headers (array of strings)
     */
    public function importFileItemWithHttpInfo($system_id, $file_path, $body, $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\FileInfo';
        $request = $this->importFileItemRequest($system_id, $file_path, $body, $naked);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Agave\Client\Model\FileInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation importFileItemAsync
     *
     * 
     *
     * @param  string $system_id The id of the system. (required)
     * @param  string $file_path The relative or absolute path where the file item should be imported (required)
     * @param  \Agave\Client\Model\FileImportRequest $body The import request (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function importFileItemAsync($system_id, $file_path, $body, $naked = 'true')
    {
        return $this->importFileItemAsyncWithHttpInfo($system_id, $file_path, $body, $naked)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation importFileItemAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $system_id The id of the system. (required)
     * @param  string $file_path The relative or absolute path where the file item should be imported (required)
     * @param  \Agave\Client\Model\FileImportRequest $body The import request (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function importFileItemAsyncWithHttpInfo($system_id, $file_path, $body, $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\FileInfo';
        $request = $this->importFileItemRequest($system_id, $file_path, $body, $naked);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'importFileItem'
     *
     * @param  string $system_id The id of the system. (required)
     * @param  string $file_path The relative or absolute path where the file item should be imported (required)
     * @param  \Agave\Client\Model\FileImportRequest $body The import request (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function importFileItemRequest($system_id, $file_path, $body, $naked = 'true')
    {
        // verify the required parameter 'system_id' is set
        if ($system_id === null || (is_array($system_id) && count($system_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $system_id when calling importFileItem'
            );
        }
        // verify the required parameter 'file_path' is set
        if ($file_path === null || (is_array($file_path) && count($file_path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_path when calling importFileItem'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling importFileItem'
            );
        }

        $resourcePath = '/files/v2/media/system/{systemId}/{filePath}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }

        // path params
        if ($system_id !== null) {
            $resourcePath = str_replace(
                '{' . 'systemId' . '}',
                ObjectSerializer::toPathValue($system_id),
                $resourcePath
            );
        }
        // path params
        if ($file_path !== null) {
            $resourcePath = str_replace(
                '{' . 'filePath' . '}',
                ObjectSerializer::toPathValue($file_path),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation importFileItemToDefaultSystem
     *
     * @param  string $file_path The relative or absolute path where the file item should be imported (required)
     * @param  \Agave\Client\Model\FileImportRequest $body The import request (required)
     * @param  string $naked If true, the response wrapper is stripped and the raw object is returned (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Agave\Client\Model\FileInfo
     */
    public function importFileItemToDefaultSystem($file_path, $body, $naked = 'true')
    {
        list($response) = $this->importFileItemToDefaultSystemWithHttpInfo($file_path, $body, $naked);
        return $response;
    }

    /**
     * Operation importFileItemToDefaultSystemWithHttpInfo
     *
     * @param  string $file_path The relative or absolute path where the file item should be imported (required)
     * @param  \Agave\Client\Model\FileImportRequest $body The import request (required)
     * @param  string $naked If true, the response wrapper is stripped and the raw object is returned (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Agave\Client\Model\FileInfo, HTTP status code, HTTP response headers (array of strings)
     */
    public function importFileItemToDefaultSystemWithHttpInfo($file_path, $body, $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\FileInfo';
        $request = $this->importFileItemToDefaultSystemRequest($file_path, $body, $naked);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Agave\Client\Model\FileInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation importFileItemToDefaultSystemAsync
     *
     * 
     *
     * @param  string $file_path The relative or absolute path where the file item should be imported (required)
     * @param  \Agave\Client\Model\FileImportRequest $body The import request (required)
     * @param  string $naked If true, the response wrapper is stripped and the raw object is returned (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function importFileItemToDefaultSystemAsync($file_path, $body, $naked = 'true')
    {
        return $this->importFileItemToDefaultSystemAsyncWithHttpInfo($file_path, $body, $naked)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation importFileItemToDefaultSystemAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $file_path The relative or absolute path where the file item should be imported (required)
     * @param  \Agave\Client\Model\FileImportRequest $body The import request (required)
     * @param  string $naked If true, the response wrapper is stripped and the raw object is returned (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function importFileItemToDefaultSystemAsyncWithHttpInfo($file_path, $body, $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\FileInfo';
        $request = $this->importFileItemToDefaultSystemRequest($file_path, $body, $naked);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'importFileItemToDefaultSystem'
     *
     * @param  string $file_path The relative or absolute path where the file item should be imported (required)
     * @param  \Agave\Client\Model\FileImportRequest $body The import request (required)
     * @param  string $naked If true, the response wrapper is stripped and the raw object is returned (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function importFileItemToDefaultSystemRequest($file_path, $body, $naked = 'true')
    {
        // verify the required parameter 'file_path' is set
        if ($file_path === null || (is_array($file_path) && count($file_path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_path when calling importFileItemToDefaultSystem'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling importFileItemToDefaultSystem'
            );
        }

        $resourcePath = '/files/v2/media/{filePath}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }

        // path params
        if ($file_path !== null) {
            $resourcePath = str_replace(
                '{' . 'filePath' . '}',
                ObjectSerializer::toPathValue($file_path),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invokeFileActionOnDefaultSystem
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  \Agave\Client\Model\FileAction $body The operation to perform (required)
     * @param  string $naked If true, the response wrapper is stripped and the raw object is returned (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function invokeFileActionOnDefaultSystem($file_path, $body, $naked = 'true')
    {
        list($response) = $this->invokeFileActionOnDefaultSystemWithHttpInfo($file_path, $body, $naked);
        return $response;
    }

    /**
     * Operation invokeFileActionOnDefaultSystemWithHttpInfo
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  \Agave\Client\Model\FileAction $body The operation to perform (required)
     * @param  string $naked If true, the response wrapper is stripped and the raw object is returned (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function invokeFileActionOnDefaultSystemWithHttpInfo($file_path, $body, $naked = 'true')
    {
        $returnType = 'object';
        $request = $this->invokeFileActionOnDefaultSystemRequest($file_path, $body, $naked);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation invokeFileActionOnDefaultSystemAsync
     *
     * 
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  \Agave\Client\Model\FileAction $body The operation to perform (required)
     * @param  string $naked If true, the response wrapper is stripped and the raw object is returned (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invokeFileActionOnDefaultSystemAsync($file_path, $body, $naked = 'true')
    {
        return $this->invokeFileActionOnDefaultSystemAsyncWithHttpInfo($file_path, $body, $naked)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invokeFileActionOnDefaultSystemAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  \Agave\Client\Model\FileAction $body The operation to perform (required)
     * @param  string $naked If true, the response wrapper is stripped and the raw object is returned (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invokeFileActionOnDefaultSystemAsyncWithHttpInfo($file_path, $body, $naked = 'true')
    {
        $returnType = 'object';
        $request = $this->invokeFileActionOnDefaultSystemRequest($file_path, $body, $naked);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invokeFileActionOnDefaultSystem'
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  \Agave\Client\Model\FileAction $body The operation to perform (required)
     * @param  string $naked If true, the response wrapper is stripped and the raw object is returned (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function invokeFileActionOnDefaultSystemRequest($file_path, $body, $naked = 'true')
    {
        // verify the required parameter 'file_path' is set
        if ($file_path === null || (is_array($file_path) && count($file_path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_path when calling invokeFileActionOnDefaultSystem'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling invokeFileActionOnDefaultSystem'
            );
        }

        $resourcePath = '/files/v2/media/{filePath}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }

        // path params
        if ($file_path !== null) {
            $resourcePath = str_replace(
                '{' . 'filePath' . '}',
                ObjectSerializer::toPathValue($file_path),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invokeFileItemAction
     *
     * @param  string $system_id The unique id of the system on which the data resides. (required)
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  \Agave\Client\Model\FileAction $body The operation to perform. (required)
     * @param  bool $naked naked (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function invokeFileItemAction($system_id, $file_path, $body, $naked = 'true')
    {
        list($response) = $this->invokeFileItemActionWithHttpInfo($system_id, $file_path, $body, $naked);
        return $response;
    }

    /**
     * Operation invokeFileItemActionWithHttpInfo
     *
     * @param  string $system_id The unique id of the system on which the data resides. (required)
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  \Agave\Client\Model\FileAction $body The operation to perform. (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function invokeFileItemActionWithHttpInfo($system_id, $file_path, $body, $naked = 'true')
    {
        $returnType = 'object';
        $request = $this->invokeFileItemActionRequest($system_id, $file_path, $body, $naked);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation invokeFileItemActionAsync
     *
     * 
     *
     * @param  string $system_id The unique id of the system on which the data resides. (required)
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  \Agave\Client\Model\FileAction $body The operation to perform. (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invokeFileItemActionAsync($system_id, $file_path, $body, $naked = 'true')
    {
        return $this->invokeFileItemActionAsyncWithHttpInfo($system_id, $file_path, $body, $naked)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invokeFileItemActionAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $system_id The unique id of the system on which the data resides. (required)
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  \Agave\Client\Model\FileAction $body The operation to perform. (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invokeFileItemActionAsyncWithHttpInfo($system_id, $file_path, $body, $naked = 'true')
    {
        $returnType = 'object';
        $request = $this->invokeFileItemActionRequest($system_id, $file_path, $body, $naked);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invokeFileItemAction'
     *
     * @param  string $system_id The unique id of the system on which the data resides. (required)
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  \Agave\Client\Model\FileAction $body The operation to perform. (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function invokeFileItemActionRequest($system_id, $file_path, $body, $naked = 'true')
    {
        // verify the required parameter 'system_id' is set
        if ($system_id === null || (is_array($system_id) && count($system_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $system_id when calling invokeFileItemAction'
            );
        }
        // verify the required parameter 'file_path' is set
        if ($file_path === null || (is_array($file_path) && count($file_path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_path when calling invokeFileItemAction'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling invokeFileItemAction'
            );
        }

        $resourcePath = '/files/v2/media/system/{systemId}/{filePath}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }

        // path params
        if ($system_id !== null) {
            $resourcePath = str_replace(
                '{' . 'systemId' . '}',
                ObjectSerializer::toPathValue($system_id),
                $resourcePath
            );
        }
        // path params
        if ($file_path !== null) {
            $resourcePath = str_replace(
                '{' . 'filePath' . '}',
                ObjectSerializer::toPathValue($file_path),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listFileItemHistory
     *
     * @param  string $file_path The path of the file relative to the given system root location. (required)
     * @param  string $system_id The system on which the file item resides (required)
     * @param  string $status The status of the event (optional)
     * @param  string $created The date the event occurred (optional)
     * @param  string $filter A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects (optional, default to *)
     * @param  string $naked If true, the response wrapper is stripped and the raw object is returned (optional, default to true)
     * @param  int $limit The maximum number of results returned from this query (optional, default to 100)
     * @param  int $offset The number of results skipped in the result set returned from this query (optional, default to 0)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Agave\Client\Model\HistoryEvent
     */
    public function listFileItemHistory($file_path, $system_id, $status = null, $created = null, $filter = '*', $naked = 'true', $limit = '100', $offset = '0')
    {
        list($response) = $this->listFileItemHistoryWithHttpInfo($file_path, $system_id, $status, $created, $filter, $naked, $limit, $offset);
        return $response;
    }

    /**
     * Operation listFileItemHistoryWithHttpInfo
     *
     * @param  string $file_path The path of the file relative to the given system root location. (required)
     * @param  string $system_id The system on which the file item resides (required)
     * @param  string $status The status of the event (optional)
     * @param  string $created The date the event occurred (optional)
     * @param  string $filter A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects (optional, default to *)
     * @param  string $naked If true, the response wrapper is stripped and the raw object is returned (optional, default to true)
     * @param  int $limit The maximum number of results returned from this query (optional, default to 100)
     * @param  int $offset The number of results skipped in the result set returned from this query (optional, default to 0)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Agave\Client\Model\HistoryEvent, HTTP status code, HTTP response headers (array of strings)
     */
    public function listFileItemHistoryWithHttpInfo($file_path, $system_id, $status = null, $created = null, $filter = '*', $naked = 'true', $limit = '100', $offset = '0')
    {
        $returnType = '\Agave\Client\Model\HistoryEvent';
        $request = $this->listFileItemHistoryRequest($file_path, $system_id, $status, $created, $filter, $naked, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Agave\Client\Model\HistoryEvent',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listFileItemHistoryAsync
     *
     * 
     *
     * @param  string $file_path The path of the file relative to the given system root location. (required)
     * @param  string $system_id The system on which the file item resides (required)
     * @param  string $status The status of the event (optional)
     * @param  string $created The date the event occurred (optional)
     * @param  string $filter A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects (optional, default to *)
     * @param  string $naked If true, the response wrapper is stripped and the raw object is returned (optional, default to true)
     * @param  int $limit The maximum number of results returned from this query (optional, default to 100)
     * @param  int $offset The number of results skipped in the result set returned from this query (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listFileItemHistoryAsync($file_path, $system_id, $status = null, $created = null, $filter = '*', $naked = 'true', $limit = '100', $offset = '0')
    {
        return $this->listFileItemHistoryAsyncWithHttpInfo($file_path, $system_id, $status, $created, $filter, $naked, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listFileItemHistoryAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $file_path The path of the file relative to the given system root location. (required)
     * @param  string $system_id The system on which the file item resides (required)
     * @param  string $status The status of the event (optional)
     * @param  string $created The date the event occurred (optional)
     * @param  string $filter A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects (optional, default to *)
     * @param  string $naked If true, the response wrapper is stripped and the raw object is returned (optional, default to true)
     * @param  int $limit The maximum number of results returned from this query (optional, default to 100)
     * @param  int $offset The number of results skipped in the result set returned from this query (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listFileItemHistoryAsyncWithHttpInfo($file_path, $system_id, $status = null, $created = null, $filter = '*', $naked = 'true', $limit = '100', $offset = '0')
    {
        $returnType = '\Agave\Client\Model\HistoryEvent';
        $request = $this->listFileItemHistoryRequest($file_path, $system_id, $status, $created, $filter, $naked, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listFileItemHistory'
     *
     * @param  string $file_path The path of the file relative to the given system root location. (required)
     * @param  string $system_id The system on which the file item resides (required)
     * @param  string $status The status of the event (optional)
     * @param  string $created The date the event occurred (optional)
     * @param  string $filter A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects (optional, default to *)
     * @param  string $naked If true, the response wrapper is stripped and the raw object is returned (optional, default to true)
     * @param  int $limit The maximum number of results returned from this query (optional, default to 100)
     * @param  int $offset The number of results skipped in the result set returned from this query (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listFileItemHistoryRequest($file_path, $system_id, $status = null, $created = null, $filter = '*', $naked = 'true', $limit = '100', $offset = '0')
    {
        // verify the required parameter 'file_path' is set
        if ($file_path === null || (is_array($file_path) && count($file_path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_path when calling listFileItemHistory'
            );
        }
        // verify the required parameter 'system_id' is set
        if ($system_id === null || (is_array($system_id) && count($system_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $system_id when calling listFileItemHistory'
            );
        }

        $resourcePath = '/files/v2/history/system/{systemId}/{filePath}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($created !== null) {
            $queryParams['created'] = ObjectSerializer::toQueryValue($created);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }

        // path params
        if ($file_path !== null) {
            $resourcePath = str_replace(
                '{' . 'filePath' . '}',
                ObjectSerializer::toPathValue($file_path),
                $resourcePath
            );
        }
        // path params
        if ($system_id !== null) {
            $resourcePath = str_replace(
                '{' . 'systemId' . '}',
                ObjectSerializer::toPathValue($system_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listFileItemHistoryOnDefaultSystem
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  string $status The event status (optional)
     * @param  string $created The date the event occurred (optional)
     * @param  string $filter A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects (optional, default to *)
     * @param  string $naked If true, the response wrapper is stripped and the raw object is returned (optional, default to true)
     * @param  int $limit The maximum number of results returned from this query (optional, default to 100)
     * @param  int $offset The number of results skipped in the result set returned from this query (optional, default to 0)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Agave\Client\Model\HistoryEvent[]
     */
    public function listFileItemHistoryOnDefaultSystem($file_path, $status = null, $created = null, $filter = '*', $naked = 'true', $limit = '100', $offset = '0')
    {
        list($response) = $this->listFileItemHistoryOnDefaultSystemWithHttpInfo($file_path, $status, $created, $filter, $naked, $limit, $offset);
        return $response;
    }

    /**
     * Operation listFileItemHistoryOnDefaultSystemWithHttpInfo
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  string $status The event status (optional)
     * @param  string $created The date the event occurred (optional)
     * @param  string $filter A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects (optional, default to *)
     * @param  string $naked If true, the response wrapper is stripped and the raw object is returned (optional, default to true)
     * @param  int $limit The maximum number of results returned from this query (optional, default to 100)
     * @param  int $offset The number of results skipped in the result set returned from this query (optional, default to 0)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Agave\Client\Model\HistoryEvent[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listFileItemHistoryOnDefaultSystemWithHttpInfo($file_path, $status = null, $created = null, $filter = '*', $naked = 'true', $limit = '100', $offset = '0')
    {
        $returnType = '\Agave\Client\Model\HistoryEvent[]';
        $request = $this->listFileItemHistoryOnDefaultSystemRequest($file_path, $status, $created, $filter, $naked, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Agave\Client\Model\HistoryEvent[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listFileItemHistoryOnDefaultSystemAsync
     *
     * 
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  string $status The event status (optional)
     * @param  string $created The date the event occurred (optional)
     * @param  string $filter A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects (optional, default to *)
     * @param  string $naked If true, the response wrapper is stripped and the raw object is returned (optional, default to true)
     * @param  int $limit The maximum number of results returned from this query (optional, default to 100)
     * @param  int $offset The number of results skipped in the result set returned from this query (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listFileItemHistoryOnDefaultSystemAsync($file_path, $status = null, $created = null, $filter = '*', $naked = 'true', $limit = '100', $offset = '0')
    {
        return $this->listFileItemHistoryOnDefaultSystemAsyncWithHttpInfo($file_path, $status, $created, $filter, $naked, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listFileItemHistoryOnDefaultSystemAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  string $status The event status (optional)
     * @param  string $created The date the event occurred (optional)
     * @param  string $filter A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects (optional, default to *)
     * @param  string $naked If true, the response wrapper is stripped and the raw object is returned (optional, default to true)
     * @param  int $limit The maximum number of results returned from this query (optional, default to 100)
     * @param  int $offset The number of results skipped in the result set returned from this query (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listFileItemHistoryOnDefaultSystemAsyncWithHttpInfo($file_path, $status = null, $created = null, $filter = '*', $naked = 'true', $limit = '100', $offset = '0')
    {
        $returnType = '\Agave\Client\Model\HistoryEvent[]';
        $request = $this->listFileItemHistoryOnDefaultSystemRequest($file_path, $status, $created, $filter, $naked, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listFileItemHistoryOnDefaultSystem'
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  string $status The event status (optional)
     * @param  string $created The date the event occurred (optional)
     * @param  string $filter A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects (optional, default to *)
     * @param  string $naked If true, the response wrapper is stripped and the raw object is returned (optional, default to true)
     * @param  int $limit The maximum number of results returned from this query (optional, default to 100)
     * @param  int $offset The number of results skipped in the result set returned from this query (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listFileItemHistoryOnDefaultSystemRequest($file_path, $status = null, $created = null, $filter = '*', $naked = 'true', $limit = '100', $offset = '0')
    {
        // verify the required parameter 'file_path' is set
        if ($file_path === null || (is_array($file_path) && count($file_path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_path when calling listFileItemHistoryOnDefaultSystem'
            );
        }

        $resourcePath = '/files/v2/history/{filePath}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($created !== null) {
            $queryParams['created'] = ObjectSerializer::toQueryValue($created);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }

        // path params
        if ($file_path !== null) {
            $resourcePath = str_replace(
                '{' . 'filePath' . '}',
                ObjectSerializer::toPathValue($file_path),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listFileItemPermissions
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  string $system_id The system id (required)
     * @param  int $limit The maximum number of results returned from this query (optional, default to 100)
     * @param  int $offset The number of results skipped in the result set returned from this query (optional, default to 0)
     * @param  bool $naked naked (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Agave\Client\Model\FilePermission[]
     */
    public function listFileItemPermissions($file_path, $system_id, $limit = '100', $offset = '0', $naked = 'true')
    {
        list($response) = $this->listFileItemPermissionsWithHttpInfo($file_path, $system_id, $limit, $offset, $naked);
        return $response;
    }

    /**
     * Operation listFileItemPermissionsWithHttpInfo
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  string $system_id The system id (required)
     * @param  int $limit The maximum number of results returned from this query (optional, default to 100)
     * @param  int $offset The number of results skipped in the result set returned from this query (optional, default to 0)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Agave\Client\Model\FilePermission[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listFileItemPermissionsWithHttpInfo($file_path, $system_id, $limit = '100', $offset = '0', $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\FilePermission[]';
        $request = $this->listFileItemPermissionsRequest($file_path, $system_id, $limit, $offset, $naked);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Agave\Client\Model\FilePermission[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listFileItemPermissionsAsync
     *
     * 
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  string $system_id The system id (required)
     * @param  int $limit The maximum number of results returned from this query (optional, default to 100)
     * @param  int $offset The number of results skipped in the result set returned from this query (optional, default to 0)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listFileItemPermissionsAsync($file_path, $system_id, $limit = '100', $offset = '0', $naked = 'true')
    {
        return $this->listFileItemPermissionsAsyncWithHttpInfo($file_path, $system_id, $limit, $offset, $naked)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listFileItemPermissionsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  string $system_id The system id (required)
     * @param  int $limit The maximum number of results returned from this query (optional, default to 100)
     * @param  int $offset The number of results skipped in the result set returned from this query (optional, default to 0)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listFileItemPermissionsAsyncWithHttpInfo($file_path, $system_id, $limit = '100', $offset = '0', $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\FilePermission[]';
        $request = $this->listFileItemPermissionsRequest($file_path, $system_id, $limit, $offset, $naked);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listFileItemPermissions'
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  string $system_id The system id (required)
     * @param  int $limit The maximum number of results returned from this query (optional, default to 100)
     * @param  int $offset The number of results skipped in the result set returned from this query (optional, default to 0)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listFileItemPermissionsRequest($file_path, $system_id, $limit = '100', $offset = '0', $naked = 'true')
    {
        // verify the required parameter 'file_path' is set
        if ($file_path === null || (is_array($file_path) && count($file_path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_path when calling listFileItemPermissions'
            );
        }
        // verify the required parameter 'system_id' is set
        if ($system_id === null || (is_array($system_id) && count($system_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $system_id when calling listFileItemPermissions'
            );
        }

        $resourcePath = '/files/v2/pems/system/{systemId}/{filePath}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }

        // path params
        if ($file_path !== null) {
            $resourcePath = str_replace(
                '{' . 'filePath' . '}',
                ObjectSerializer::toPathValue($file_path),
                $resourcePath
            );
        }
        // path params
        if ($system_id !== null) {
            $resourcePath = str_replace(
                '{' . 'systemId' . '}',
                ObjectSerializer::toPathValue($system_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listFileItemPermissionsOnDefaultSystem
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  int $limit The maximum number of results returned from this query (optional, default to 100)
     * @param  int $offset The number of results skipped in the result set returned from this query (optional, default to 0)
     * @param  bool $naked naked (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Agave\Client\Model\FilePermission[]
     */
    public function listFileItemPermissionsOnDefaultSystem($file_path, $limit = '100', $offset = '0', $naked = 'true')
    {
        list($response) = $this->listFileItemPermissionsOnDefaultSystemWithHttpInfo($file_path, $limit, $offset, $naked);
        return $response;
    }

    /**
     * Operation listFileItemPermissionsOnDefaultSystemWithHttpInfo
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  int $limit The maximum number of results returned from this query (optional, default to 100)
     * @param  int $offset The number of results skipped in the result set returned from this query (optional, default to 0)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Agave\Client\Model\FilePermission[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listFileItemPermissionsOnDefaultSystemWithHttpInfo($file_path, $limit = '100', $offset = '0', $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\FilePermission[]';
        $request = $this->listFileItemPermissionsOnDefaultSystemRequest($file_path, $limit, $offset, $naked);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Agave\Client\Model\FilePermission[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listFileItemPermissionsOnDefaultSystemAsync
     *
     * 
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  int $limit The maximum number of results returned from this query (optional, default to 100)
     * @param  int $offset The number of results skipped in the result set returned from this query (optional, default to 0)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listFileItemPermissionsOnDefaultSystemAsync($file_path, $limit = '100', $offset = '0', $naked = 'true')
    {
        return $this->listFileItemPermissionsOnDefaultSystemAsyncWithHttpInfo($file_path, $limit, $offset, $naked)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listFileItemPermissionsOnDefaultSystemAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  int $limit The maximum number of results returned from this query (optional, default to 100)
     * @param  int $offset The number of results skipped in the result set returned from this query (optional, default to 0)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listFileItemPermissionsOnDefaultSystemAsyncWithHttpInfo($file_path, $limit = '100', $offset = '0', $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\FilePermission[]';
        $request = $this->listFileItemPermissionsOnDefaultSystemRequest($file_path, $limit, $offset, $naked);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listFileItemPermissionsOnDefaultSystem'
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  int $limit The maximum number of results returned from this query (optional, default to 100)
     * @param  int $offset The number of results skipped in the result set returned from this query (optional, default to 0)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listFileItemPermissionsOnDefaultSystemRequest($file_path, $limit = '100', $offset = '0', $naked = 'true')
    {
        // verify the required parameter 'file_path' is set
        if ($file_path === null || (is_array($file_path) && count($file_path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_path when calling listFileItemPermissionsOnDefaultSystem'
            );
        }

        $resourcePath = '/files/v2/pems/{filePath}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }

        // path params
        if ($file_path !== null) {
            $resourcePath = str_replace(
                '{' . 'filePath' . '}',
                ObjectSerializer::toPathValue($file_path),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listFileItems
     *
     * @param  string $system_id The unique id of the system on which the data resides. (required)
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  bool $naked naked (optional, default to true)
     * @param  int $limit The maximum number of results returned from this query (optional, default to 100)
     * @param  int $offset The number of results skipped in the result set returned from this query (optional, default to 0)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Agave\Client\Model\FileInfo[]
     */
    public function listFileItems($system_id, $file_path, $naked = 'true', $limit = '100', $offset = '0')
    {
        list($response) = $this->listFileItemsWithHttpInfo($system_id, $file_path, $naked, $limit, $offset);
        return $response;
    }

    /**
     * Operation listFileItemsWithHttpInfo
     *
     * @param  string $system_id The unique id of the system on which the data resides. (required)
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  bool $naked (optional, default to true)
     * @param  int $limit The maximum number of results returned from this query (optional, default to 100)
     * @param  int $offset The number of results skipped in the result set returned from this query (optional, default to 0)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Agave\Client\Model\FileInfo[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listFileItemsWithHttpInfo($system_id, $file_path, $naked = 'true', $limit = '100', $offset = '0')
    {
        $returnType = '\Agave\Client\Model\FileInfo[]';
        $request = $this->listFileItemsRequest($system_id, $file_path, $naked, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Agave\Client\Model\FileInfo[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listFileItemsAsync
     *
     * 
     *
     * @param  string $system_id The unique id of the system on which the data resides. (required)
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  bool $naked (optional, default to true)
     * @param  int $limit The maximum number of results returned from this query (optional, default to 100)
     * @param  int $offset The number of results skipped in the result set returned from this query (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listFileItemsAsync($system_id, $file_path, $naked = 'true', $limit = '100', $offset = '0')
    {
        return $this->listFileItemsAsyncWithHttpInfo($system_id, $file_path, $naked, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listFileItemsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $system_id The unique id of the system on which the data resides. (required)
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  bool $naked (optional, default to true)
     * @param  int $limit The maximum number of results returned from this query (optional, default to 100)
     * @param  int $offset The number of results skipped in the result set returned from this query (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listFileItemsAsyncWithHttpInfo($system_id, $file_path, $naked = 'true', $limit = '100', $offset = '0')
    {
        $returnType = '\Agave\Client\Model\FileInfo[]';
        $request = $this->listFileItemsRequest($system_id, $file_path, $naked, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listFileItems'
     *
     * @param  string $system_id The unique id of the system on which the data resides. (required)
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  bool $naked (optional, default to true)
     * @param  int $limit The maximum number of results returned from this query (optional, default to 100)
     * @param  int $offset The number of results skipped in the result set returned from this query (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listFileItemsRequest($system_id, $file_path, $naked = 'true', $limit = '100', $offset = '0')
    {
        // verify the required parameter 'system_id' is set
        if ($system_id === null || (is_array($system_id) && count($system_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $system_id when calling listFileItems'
            );
        }
        // verify the required parameter 'file_path' is set
        if ($file_path === null || (is_array($file_path) && count($file_path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_path when calling listFileItems'
            );
        }

        $resourcePath = '/files/v2/listings/system/{systemId}/{filePath}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }

        // path params
        if ($system_id !== null) {
            $resourcePath = str_replace(
                '{' . 'systemId' . '}',
                ObjectSerializer::toPathValue($system_id),
                $resourcePath
            );
        }
        // path params
        if ($file_path !== null) {
            $resourcePath = str_replace(
                '{' . 'filePath' . '}',
                ObjectSerializer::toPathValue($file_path),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listFileItemsOnDefaultSystem
     *
     * @param  string $filepath The path of the file relative to the default storage location of the user (required)
     * @param  string $filter A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects (optional, default to *)
     * @param  string $naked If true, the response wrapper is stripped and the raw object is returned (optional, default to true)
     * @param  int $limit The maximum number of results returned from this query (optional, default to 100)
     * @param  int $offset The number of results skipped in the result set returned from this query (optional, default to 0)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Agave\Client\Model\FileInfo[]
     */
    public function listFileItemsOnDefaultSystem($filepath, $filter = '*', $naked = 'true', $limit = '100', $offset = '0')
    {
        list($response) = $this->listFileItemsOnDefaultSystemWithHttpInfo($filepath, $filter, $naked, $limit, $offset);
        return $response;
    }

    /**
     * Operation listFileItemsOnDefaultSystemWithHttpInfo
     *
     * @param  string $filepath The path of the file relative to the default storage location of the user (required)
     * @param  string $filter A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects (optional, default to *)
     * @param  string $naked If true, the response wrapper is stripped and the raw object is returned (optional, default to true)
     * @param  int $limit The maximum number of results returned from this query (optional, default to 100)
     * @param  int $offset The number of results skipped in the result set returned from this query (optional, default to 0)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Agave\Client\Model\FileInfo[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listFileItemsOnDefaultSystemWithHttpInfo($filepath, $filter = '*', $naked = 'true', $limit = '100', $offset = '0')
    {
        $returnType = '\Agave\Client\Model\FileInfo[]';
        $request = $this->listFileItemsOnDefaultSystemRequest($filepath, $filter, $naked, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Agave\Client\Model\FileInfo[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listFileItemsOnDefaultSystemAsync
     *
     * 
     *
     * @param  string $filepath The path of the file relative to the default storage location of the user (required)
     * @param  string $filter A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects (optional, default to *)
     * @param  string $naked If true, the response wrapper is stripped and the raw object is returned (optional, default to true)
     * @param  int $limit The maximum number of results returned from this query (optional, default to 100)
     * @param  int $offset The number of results skipped in the result set returned from this query (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listFileItemsOnDefaultSystemAsync($filepath, $filter = '*', $naked = 'true', $limit = '100', $offset = '0')
    {
        return $this->listFileItemsOnDefaultSystemAsyncWithHttpInfo($filepath, $filter, $naked, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listFileItemsOnDefaultSystemAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $filepath The path of the file relative to the default storage location of the user (required)
     * @param  string $filter A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects (optional, default to *)
     * @param  string $naked If true, the response wrapper is stripped and the raw object is returned (optional, default to true)
     * @param  int $limit The maximum number of results returned from this query (optional, default to 100)
     * @param  int $offset The number of results skipped in the result set returned from this query (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listFileItemsOnDefaultSystemAsyncWithHttpInfo($filepath, $filter = '*', $naked = 'true', $limit = '100', $offset = '0')
    {
        $returnType = '\Agave\Client\Model\FileInfo[]';
        $request = $this->listFileItemsOnDefaultSystemRequest($filepath, $filter, $naked, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listFileItemsOnDefaultSystem'
     *
     * @param  string $filepath The path of the file relative to the default storage location of the user (required)
     * @param  string $filter A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects (optional, default to *)
     * @param  string $naked If true, the response wrapper is stripped and the raw object is returned (optional, default to true)
     * @param  int $limit The maximum number of results returned from this query (optional, default to 100)
     * @param  int $offset The number of results skipped in the result set returned from this query (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listFileItemsOnDefaultSystemRequest($filepath, $filter = '*', $naked = 'true', $limit = '100', $offset = '0')
    {
        // verify the required parameter 'filepath' is set
        if ($filepath === null || (is_array($filepath) && count($filepath) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filepath when calling listFileItemsOnDefaultSystem'
            );
        }

        $resourcePath = '/files/v2/listings/{filepath}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }

        // path params
        if ($filepath !== null) {
            $resourcePath = str_replace(
                '{' . 'filepath' . '}',
                ObjectSerializer::toPathValue($filepath),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateFileItemPermission
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  string $system_id The id of the system on which the file resides (required)
     * @param  \Agave\Client\Model\PermissionRequest $body The updated permission value (required)
     * @param  bool $naked naked (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Agave\Client\Model\FilePermission
     */
    public function updateFileItemPermission($file_path, $system_id, $body, $naked = 'true')
    {
        list($response) = $this->updateFileItemPermissionWithHttpInfo($file_path, $system_id, $body, $naked);
        return $response;
    }

    /**
     * Operation updateFileItemPermissionWithHttpInfo
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  string $system_id The id of the system on which the file resides (required)
     * @param  \Agave\Client\Model\PermissionRequest $body The updated permission value (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Agave\Client\Model\FilePermission, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateFileItemPermissionWithHttpInfo($file_path, $system_id, $body, $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\FilePermission';
        $request = $this->updateFileItemPermissionRequest($file_path, $system_id, $body, $naked);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Agave\Client\Model\FilePermission',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateFileItemPermissionAsync
     *
     * 
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  string $system_id The id of the system on which the file resides (required)
     * @param  \Agave\Client\Model\PermissionRequest $body The updated permission value (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFileItemPermissionAsync($file_path, $system_id, $body, $naked = 'true')
    {
        return $this->updateFileItemPermissionAsyncWithHttpInfo($file_path, $system_id, $body, $naked)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateFileItemPermissionAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  string $system_id The id of the system on which the file resides (required)
     * @param  \Agave\Client\Model\PermissionRequest $body The updated permission value (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFileItemPermissionAsyncWithHttpInfo($file_path, $system_id, $body, $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\FilePermission';
        $request = $this->updateFileItemPermissionRequest($file_path, $system_id, $body, $naked);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateFileItemPermission'
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  string $system_id The id of the system on which the file resides (required)
     * @param  \Agave\Client\Model\PermissionRequest $body The updated permission value (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateFileItemPermissionRequest($file_path, $system_id, $body, $naked = 'true')
    {
        // verify the required parameter 'file_path' is set
        if ($file_path === null || (is_array($file_path) && count($file_path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_path when calling updateFileItemPermission'
            );
        }
        // verify the required parameter 'system_id' is set
        if ($system_id === null || (is_array($system_id) && count($system_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $system_id when calling updateFileItemPermission'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateFileItemPermission'
            );
        }

        $resourcePath = '/files/v2/pems/system/{systemId}/{filePath}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }

        // path params
        if ($file_path !== null) {
            $resourcePath = str_replace(
                '{' . 'filePath' . '}',
                ObjectSerializer::toPathValue($file_path),
                $resourcePath
            );
        }
        // path params
        if ($system_id !== null) {
            $resourcePath = str_replace(
                '{' . 'systemId' . '}',
                ObjectSerializer::toPathValue($system_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateFileItemPermissionsOnDefaultSystem
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  \Agave\Client\Model\FilePermissionRequest $body The permission add or update. (required)
     * @param  bool $file_path2 file_path2 (required)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Agave\Client\Model\FilePermission
     */
    public function updateFileItemPermissionsOnDefaultSystem($file_path, $body, $file_path2)
    {
        list($response) = $this->updateFileItemPermissionsOnDefaultSystemWithHttpInfo($file_path, $body, $file_path2);
        return $response;
    }

    /**
     * Operation updateFileItemPermissionsOnDefaultSystemWithHttpInfo
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  \Agave\Client\Model\FilePermissionRequest $body The permission add or update. (required)
     * @param  bool $file_path2 (required)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Agave\Client\Model\FilePermission, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateFileItemPermissionsOnDefaultSystemWithHttpInfo($file_path, $body, $file_path2)
    {
        $returnType = '\Agave\Client\Model\FilePermission';
        $request = $this->updateFileItemPermissionsOnDefaultSystemRequest($file_path, $body, $file_path2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Agave\Client\Model\FilePermission',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateFileItemPermissionsOnDefaultSystemAsync
     *
     * 
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  \Agave\Client\Model\FilePermissionRequest $body The permission add or update. (required)
     * @param  bool $file_path2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFileItemPermissionsOnDefaultSystemAsync($file_path, $body, $file_path2)
    {
        return $this->updateFileItemPermissionsOnDefaultSystemAsyncWithHttpInfo($file_path, $body, $file_path2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateFileItemPermissionsOnDefaultSystemAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  \Agave\Client\Model\FilePermissionRequest $body The permission add or update. (required)
     * @param  bool $file_path2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFileItemPermissionsOnDefaultSystemAsyncWithHttpInfo($file_path, $body, $file_path2)
    {
        $returnType = '\Agave\Client\Model\FilePermission';
        $request = $this->updateFileItemPermissionsOnDefaultSystemRequest($file_path, $body, $file_path2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateFileItemPermissionsOnDefaultSystem'
     *
     * @param  string $file_path The path of the file relative to the default storage location of the user. (required)
     * @param  \Agave\Client\Model\FilePermissionRequest $body The permission add or update. (required)
     * @param  bool $file_path2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateFileItemPermissionsOnDefaultSystemRequest($file_path, $body, $file_path2)
    {
        // verify the required parameter 'file_path' is set
        if ($file_path === null || (is_array($file_path) && count($file_path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_path when calling updateFileItemPermissionsOnDefaultSystem'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateFileItemPermissionsOnDefaultSystem'
            );
        }
        // verify the required parameter 'file_path2' is set
        if ($file_path2 === null || (is_array($file_path2) && count($file_path2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_path2 when calling updateFileItemPermissionsOnDefaultSystem'
            );
        }

        $resourcePath = '/files/v2/pems/{filePath}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($file_path2 !== null) {
            $queryParams['filePath'] = ObjectSerializer::toQueryValue($file_path2);
        }

        // path params
        if ($file_path !== null) {
            $resourcePath = str_replace(
                '{' . 'filePath' . '}',
                ObjectSerializer::toPathValue($file_path),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
