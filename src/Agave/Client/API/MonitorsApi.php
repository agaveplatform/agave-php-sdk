<?php
/**
 * MonitorsApi
 * PHP version 5
 *
 * @category Class
 * @package  Agave\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Agave Platform Science API
 *
 * Power your digital lab and reduce the time from theory to discovery using the Agave Science-as-a-Service API Platform. Agave provides hosted services that allow researchers to manage data, conduct experiments, and publish and share results from anywhere at any time.
 *
 * OpenAPI spec version: 2.2.14
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Agave\Client\API;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Agave\Client\ApiException;
use Agave\Client\Configuration;
use Agave\Client\HeaderSelector;
use Agave\Client\ObjectSerializer;

/**
 * MonitorsApi Class Doc Comment
 *
 * @category Class
 * @package  Agave\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MonitorsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addMonitoringTasks
     *
     * @param  \Agave\Client\Model\MonitoringTaskSummary $body The description of the monitoring task to run (required)
     * @param  bool $naked naked (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Agave\Client\Model\MonitoringTaskDetails
     */
    public function addMonitoringTasks($body, $naked = 'true')
    {
        list($response) = $this->addMonitoringTasksWithHttpInfo($body, $naked);
        return $response;
    }

    /**
     * Operation addMonitoringTasksWithHttpInfo
     *
     * @param  \Agave\Client\Model\MonitoringTaskSummary $body The description of the monitoring task to run (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Agave\Client\Model\MonitoringTaskDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function addMonitoringTasksWithHttpInfo($body, $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\MonitoringTaskDetails';
        $request = $this->addMonitoringTasksRequest($body, $naked);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Agave\Client\Model\MonitoringTaskDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addMonitoringTasksAsync
     *
     * 
     *
     * @param  \Agave\Client\Model\MonitoringTaskSummary $body The description of the monitoring task to run (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addMonitoringTasksAsync($body, $naked = 'true')
    {
        return $this->addMonitoringTasksAsyncWithHttpInfo($body, $naked)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addMonitoringTasksAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Agave\Client\Model\MonitoringTaskSummary $body The description of the monitoring task to run (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addMonitoringTasksAsyncWithHttpInfo($body, $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\MonitoringTaskDetails';
        $request = $this->addMonitoringTasksRequest($body, $naked);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addMonitoringTasks'
     *
     * @param  \Agave\Client\Model\MonitoringTaskSummary $body The description of the monitoring task to run (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addMonitoringTasksRequest($body, $naked = 'true')
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling addMonitoringTasks'
            );
        }

        $resourcePath = '/monitors/v2/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteMonitoringTask
     *
     * @param  string $monitor_id The id of the monitor to delete (required)
     * @param  bool $naked naked (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteMonitoringTask($monitor_id, $naked = 'true')
    {
        $this->deleteMonitoringTaskWithHttpInfo($monitor_id, $naked);
    }

    /**
     * Operation deleteMonitoringTaskWithHttpInfo
     *
     * @param  string $monitor_id The id of the monitor to delete (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteMonitoringTaskWithHttpInfo($monitor_id, $naked = 'true')
    {
        $returnType = '';
        $request = $this->deleteMonitoringTaskRequest($monitor_id, $naked);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteMonitoringTaskAsync
     *
     * 
     *
     * @param  string $monitor_id The id of the monitor to delete (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMonitoringTaskAsync($monitor_id, $naked = 'true')
    {
        return $this->deleteMonitoringTaskAsyncWithHttpInfo($monitor_id, $naked)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteMonitoringTaskAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $monitor_id The id of the monitor to delete (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMonitoringTaskAsyncWithHttpInfo($monitor_id, $naked = 'true')
    {
        $returnType = '';
        $request = $this->deleteMonitoringTaskRequest($monitor_id, $naked);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteMonitoringTask'
     *
     * @param  string $monitor_id The id of the monitor to delete (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteMonitoringTaskRequest($monitor_id, $naked = 'true')
    {
        // verify the required parameter 'monitor_id' is set
        if ($monitor_id === null || (is_array($monitor_id) && count($monitor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $monitor_id when calling deleteMonitoringTask'
            );
        }

        $resourcePath = '/monitors/v2/{monitorId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }

        // path params
        if ($monitor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'monitorId' . '}',
                ObjectSerializer::toPathValue($monitor_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation forceMonitoringTaskCheck
     *
     * @param  string $monitor_id The id of the monitor (required)
     * @param  bool $naked naked (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Agave\Client\Model\MonitoringTaskDetails
     */
    public function forceMonitoringTaskCheck($monitor_id, $naked = 'true')
    {
        list($response) = $this->forceMonitoringTaskCheckWithHttpInfo($monitor_id, $naked);
        return $response;
    }

    /**
     * Operation forceMonitoringTaskCheckWithHttpInfo
     *
     * @param  string $monitor_id The id of the monitor (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Agave\Client\Model\MonitoringTaskDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function forceMonitoringTaskCheckWithHttpInfo($monitor_id, $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\MonitoringTaskDetails';
        $request = $this->forceMonitoringTaskCheckRequest($monitor_id, $naked);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Agave\Client\Model\MonitoringTaskDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation forceMonitoringTaskCheckAsync
     *
     * 
     *
     * @param  string $monitor_id The id of the monitor (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forceMonitoringTaskCheckAsync($monitor_id, $naked = 'true')
    {
        return $this->forceMonitoringTaskCheckAsyncWithHttpInfo($monitor_id, $naked)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation forceMonitoringTaskCheckAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $monitor_id The id of the monitor (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forceMonitoringTaskCheckAsyncWithHttpInfo($monitor_id, $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\MonitoringTaskDetails';
        $request = $this->forceMonitoringTaskCheckRequest($monitor_id, $naked);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'forceMonitoringTaskCheck'
     *
     * @param  string $monitor_id The id of the monitor (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function forceMonitoringTaskCheckRequest($monitor_id, $naked = 'true')
    {
        // verify the required parameter 'monitor_id' is set
        if ($monitor_id === null || (is_array($monitor_id) && count($monitor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $monitor_id when calling forceMonitoringTaskCheck'
            );
        }

        $resourcePath = '/monitors/v2/{monitorId}/checks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }

        // path params
        if ($monitor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'monitorId' . '}',
                ObjectSerializer::toPathValue($monitor_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMonitoringTask
     *
     * @param  string $monitor_id The id of the monitor (required)
     * @param  bool $naked naked (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Agave\Client\Model\MonitoringTaskDetails
     */
    public function getMonitoringTask($monitor_id, $naked = 'true')
    {
        list($response) = $this->getMonitoringTaskWithHttpInfo($monitor_id, $naked);
        return $response;
    }

    /**
     * Operation getMonitoringTaskWithHttpInfo
     *
     * @param  string $monitor_id The id of the monitor (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Agave\Client\Model\MonitoringTaskDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMonitoringTaskWithHttpInfo($monitor_id, $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\MonitoringTaskDetails';
        $request = $this->getMonitoringTaskRequest($monitor_id, $naked);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Agave\Client\Model\MonitoringTaskDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMonitoringTaskAsync
     *
     * 
     *
     * @param  string $monitor_id The id of the monitor (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMonitoringTaskAsync($monitor_id, $naked = 'true')
    {
        return $this->getMonitoringTaskAsyncWithHttpInfo($monitor_id, $naked)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMonitoringTaskAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $monitor_id The id of the monitor (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMonitoringTaskAsyncWithHttpInfo($monitor_id, $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\MonitoringTaskDetails';
        $request = $this->getMonitoringTaskRequest($monitor_id, $naked);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMonitoringTask'
     *
     * @param  string $monitor_id The id of the monitor (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMonitoringTaskRequest($monitor_id, $naked = 'true')
    {
        // verify the required parameter 'monitor_id' is set
        if ($monitor_id === null || (is_array($monitor_id) && count($monitor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $monitor_id when calling getMonitoringTask'
            );
        }

        $resourcePath = '/monitors/v2/{monitorId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }

        // path params
        if ($monitor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'monitorId' . '}',
                ObjectSerializer::toPathValue($monitor_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMonitoringTaskCheck
     *
     * @param  string $monitor_id The id of the monitor (required)
     * @param  string $check_id The id of the monitor check (required)
     * @param  bool $naked naked (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Agave\Client\Model\MonitoringTaskCheck
     */
    public function getMonitoringTaskCheck($monitor_id, $check_id, $naked = 'true')
    {
        list($response) = $this->getMonitoringTaskCheckWithHttpInfo($monitor_id, $check_id, $naked);
        return $response;
    }

    /**
     * Operation getMonitoringTaskCheckWithHttpInfo
     *
     * @param  string $monitor_id The id of the monitor (required)
     * @param  string $check_id The id of the monitor check (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Agave\Client\Model\MonitoringTaskCheck, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMonitoringTaskCheckWithHttpInfo($monitor_id, $check_id, $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\MonitoringTaskCheck';
        $request = $this->getMonitoringTaskCheckRequest($monitor_id, $check_id, $naked);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Agave\Client\Model\MonitoringTaskCheck',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMonitoringTaskCheckAsync
     *
     * 
     *
     * @param  string $monitor_id The id of the monitor (required)
     * @param  string $check_id The id of the monitor check (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMonitoringTaskCheckAsync($monitor_id, $check_id, $naked = 'true')
    {
        return $this->getMonitoringTaskCheckAsyncWithHttpInfo($monitor_id, $check_id, $naked)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMonitoringTaskCheckAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $monitor_id The id of the monitor (required)
     * @param  string $check_id The id of the monitor check (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMonitoringTaskCheckAsyncWithHttpInfo($monitor_id, $check_id, $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\MonitoringTaskCheck';
        $request = $this->getMonitoringTaskCheckRequest($monitor_id, $check_id, $naked);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMonitoringTaskCheck'
     *
     * @param  string $monitor_id The id of the monitor (required)
     * @param  string $check_id The id of the monitor check (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMonitoringTaskCheckRequest($monitor_id, $check_id, $naked = 'true')
    {
        // verify the required parameter 'monitor_id' is set
        if ($monitor_id === null || (is_array($monitor_id) && count($monitor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $monitor_id when calling getMonitoringTaskCheck'
            );
        }
        // verify the required parameter 'check_id' is set
        if ($check_id === null || (is_array($check_id) && count($check_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_id when calling getMonitoringTaskCheck'
            );
        }

        $resourcePath = '/monitors/v2/{monitorId}/checks/{checkId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }

        // path params
        if ($monitor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'monitorId' . '}',
                ObjectSerializer::toPathValue($monitor_id),
                $resourcePath
            );
        }
        // path params
        if ($check_id !== null) {
            $resourcePath = str_replace(
                '{' . 'checkId' . '}',
                ObjectSerializer::toPathValue($check_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listMonitoringTaskChecks
     *
     * @param  string $monitor_id The id of the monitor (required)
     * @param  string $start_date A timestamp indicating the earliest time of the first monitor check in ISO 8601 format (optional)
     * @param  string $end_date A timestamp indicating the latest time of the first monitor check in ISO 8601 format (optional)
     * @param  string $result A timestamp indicating the latest time of the first monitor check in ISO 8601 format (optional)
     * @param  int $limit The max number of results. (optional, default to 250)
     * @param  int $offset The number of records to when returning the results. When paginating results, the page number &#x3D; ceil(offset/limit) (optional, default to 0)
     * @param  bool $naked naked (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Agave\Client\Model\MonitoringTaskCheck[]
     */
    public function listMonitoringTaskChecks($monitor_id, $start_date = null, $end_date = null, $result = null, $limit = '250', $offset = '0', $naked = 'true')
    {
        list($response) = $this->listMonitoringTaskChecksWithHttpInfo($monitor_id, $start_date, $end_date, $result, $limit, $offset, $naked);
        return $response;
    }

    /**
     * Operation listMonitoringTaskChecksWithHttpInfo
     *
     * @param  string $monitor_id The id of the monitor (required)
     * @param  string $start_date A timestamp indicating the earliest time of the first monitor check in ISO 8601 format (optional)
     * @param  string $end_date A timestamp indicating the latest time of the first monitor check in ISO 8601 format (optional)
     * @param  string $result A timestamp indicating the latest time of the first monitor check in ISO 8601 format (optional)
     * @param  int $limit The max number of results. (optional, default to 250)
     * @param  int $offset The number of records to when returning the results. When paginating results, the page number &#x3D; ceil(offset/limit) (optional, default to 0)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Agave\Client\Model\MonitoringTaskCheck[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listMonitoringTaskChecksWithHttpInfo($monitor_id, $start_date = null, $end_date = null, $result = null, $limit = '250', $offset = '0', $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\MonitoringTaskCheck[]';
        $request = $this->listMonitoringTaskChecksRequest($monitor_id, $start_date, $end_date, $result, $limit, $offset, $naked);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Agave\Client\Model\MonitoringTaskCheck[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listMonitoringTaskChecksAsync
     *
     * 
     *
     * @param  string $monitor_id The id of the monitor (required)
     * @param  string $start_date A timestamp indicating the earliest time of the first monitor check in ISO 8601 format (optional)
     * @param  string $end_date A timestamp indicating the latest time of the first monitor check in ISO 8601 format (optional)
     * @param  string $result A timestamp indicating the latest time of the first monitor check in ISO 8601 format (optional)
     * @param  int $limit The max number of results. (optional, default to 250)
     * @param  int $offset The number of records to when returning the results. When paginating results, the page number &#x3D; ceil(offset/limit) (optional, default to 0)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listMonitoringTaskChecksAsync($monitor_id, $start_date = null, $end_date = null, $result = null, $limit = '250', $offset = '0', $naked = 'true')
    {
        return $this->listMonitoringTaskChecksAsyncWithHttpInfo($monitor_id, $start_date, $end_date, $result, $limit, $offset, $naked)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listMonitoringTaskChecksAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $monitor_id The id of the monitor (required)
     * @param  string $start_date A timestamp indicating the earliest time of the first monitor check in ISO 8601 format (optional)
     * @param  string $end_date A timestamp indicating the latest time of the first monitor check in ISO 8601 format (optional)
     * @param  string $result A timestamp indicating the latest time of the first monitor check in ISO 8601 format (optional)
     * @param  int $limit The max number of results. (optional, default to 250)
     * @param  int $offset The number of records to when returning the results. When paginating results, the page number &#x3D; ceil(offset/limit) (optional, default to 0)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listMonitoringTaskChecksAsyncWithHttpInfo($monitor_id, $start_date = null, $end_date = null, $result = null, $limit = '250', $offset = '0', $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\MonitoringTaskCheck[]';
        $request = $this->listMonitoringTaskChecksRequest($monitor_id, $start_date, $end_date, $result, $limit, $offset, $naked);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listMonitoringTaskChecks'
     *
     * @param  string $monitor_id The id of the monitor (required)
     * @param  string $start_date A timestamp indicating the earliest time of the first monitor check in ISO 8601 format (optional)
     * @param  string $end_date A timestamp indicating the latest time of the first monitor check in ISO 8601 format (optional)
     * @param  string $result A timestamp indicating the latest time of the first monitor check in ISO 8601 format (optional)
     * @param  int $limit The max number of results. (optional, default to 250)
     * @param  int $offset The number of records to when returning the results. When paginating results, the page number &#x3D; ceil(offset/limit) (optional, default to 0)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listMonitoringTaskChecksRequest($monitor_id, $start_date = null, $end_date = null, $result = null, $limit = '250', $offset = '0', $naked = 'true')
    {
        // verify the required parameter 'monitor_id' is set
        if ($monitor_id === null || (is_array($monitor_id) && count($monitor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $monitor_id when calling listMonitoringTaskChecks'
            );
        }

        $resourcePath = '/monitors/v2/{monitorId}/checks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_date !== null) {
            $queryParams['startDate'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['endDate'] = ObjectSerializer::toQueryValue($end_date);
        }
        // query params
        if ($result !== null) {
            $queryParams['result'] = ObjectSerializer::toQueryValue($result);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }

        // path params
        if ($monitor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'monitorId' . '}',
                ObjectSerializer::toPathValue($monitor_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listMonitoringTasks
     *
     * @param  string $target The target system to search for. (optional)
     * @param  string $active Filter by monitors that are active or inactive. (optional, default to true)
     * @param  bool $naked naked (optional, default to true)
     * @param  int $limit The maximum number of results returned from this query (optional, default to 100)
     * @param  int $offset The number of results skipped in the result set returned from this query (optional, default to 0)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Agave\Client\Model\MonitoringTaskSummary[]
     */
    public function listMonitoringTasks($target = null, $active = 'true', $naked = 'true', $limit = '100', $offset = '0')
    {
        list($response) = $this->listMonitoringTasksWithHttpInfo($target, $active, $naked, $limit, $offset);
        return $response;
    }

    /**
     * Operation listMonitoringTasksWithHttpInfo
     *
     * @param  string $target The target system to search for. (optional)
     * @param  string $active Filter by monitors that are active or inactive. (optional, default to true)
     * @param  bool $naked (optional, default to true)
     * @param  int $limit The maximum number of results returned from this query (optional, default to 100)
     * @param  int $offset The number of results skipped in the result set returned from this query (optional, default to 0)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Agave\Client\Model\MonitoringTaskSummary[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listMonitoringTasksWithHttpInfo($target = null, $active = 'true', $naked = 'true', $limit = '100', $offset = '0')
    {
        $returnType = '\Agave\Client\Model\MonitoringTaskSummary[]';
        $request = $this->listMonitoringTasksRequest($target, $active, $naked, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Agave\Client\Model\MonitoringTaskSummary[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listMonitoringTasksAsync
     *
     * 
     *
     * @param  string $target The target system to search for. (optional)
     * @param  string $active Filter by monitors that are active or inactive. (optional, default to true)
     * @param  bool $naked (optional, default to true)
     * @param  int $limit The maximum number of results returned from this query (optional, default to 100)
     * @param  int $offset The number of results skipped in the result set returned from this query (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listMonitoringTasksAsync($target = null, $active = 'true', $naked = 'true', $limit = '100', $offset = '0')
    {
        return $this->listMonitoringTasksAsyncWithHttpInfo($target, $active, $naked, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listMonitoringTasksAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $target The target system to search for. (optional)
     * @param  string $active Filter by monitors that are active or inactive. (optional, default to true)
     * @param  bool $naked (optional, default to true)
     * @param  int $limit The maximum number of results returned from this query (optional, default to 100)
     * @param  int $offset The number of results skipped in the result set returned from this query (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listMonitoringTasksAsyncWithHttpInfo($target = null, $active = 'true', $naked = 'true', $limit = '100', $offset = '0')
    {
        $returnType = '\Agave\Client\Model\MonitoringTaskSummary[]';
        $request = $this->listMonitoringTasksRequest($target, $active, $naked, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listMonitoringTasks'
     *
     * @param  string $target The target system to search for. (optional)
     * @param  string $active Filter by monitors that are active or inactive. (optional, default to true)
     * @param  bool $naked (optional, default to true)
     * @param  int $limit The maximum number of results returned from this query (optional, default to 100)
     * @param  int $offset The number of results skipped in the result set returned from this query (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listMonitoringTasksRequest($target = null, $active = 'true', $naked = 'true', $limit = '100', $offset = '0')
    {

        $resourcePath = '/monitors/v2/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($target !== null) {
            $queryParams['target'] = ObjectSerializer::toQueryValue($target);
        }
        // query params
        if ($active !== null) {
            $queryParams['active'] = ObjectSerializer::toQueryValue($active);
        }
        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateMonitoringTask
     *
     * @param  \Agave\Client\Model\MonitoringTaskSummary $body The description of the app to add or update. This can be either a file upload or json posted to the request body. (required)
     * @param  string $monitor_id The id of the monitor to update (required)
     * @param  bool $naked naked (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Agave\Client\Model\MonitoringTaskDetails
     */
    public function updateMonitoringTask($body, $monitor_id, $naked = 'true')
    {
        list($response) = $this->updateMonitoringTaskWithHttpInfo($body, $monitor_id, $naked);
        return $response;
    }

    /**
     * Operation updateMonitoringTaskWithHttpInfo
     *
     * @param  \Agave\Client\Model\MonitoringTaskSummary $body The description of the app to add or update. This can be either a file upload or json posted to the request body. (required)
     * @param  string $monitor_id The id of the monitor to update (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Agave\Client\Model\MonitoringTaskDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateMonitoringTaskWithHttpInfo($body, $monitor_id, $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\MonitoringTaskDetails';
        $request = $this->updateMonitoringTaskRequest($body, $monitor_id, $naked);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Agave\Client\Model\MonitoringTaskDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateMonitoringTaskAsync
     *
     * 
     *
     * @param  \Agave\Client\Model\MonitoringTaskSummary $body The description of the app to add or update. This can be either a file upload or json posted to the request body. (required)
     * @param  string $monitor_id The id of the monitor to update (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateMonitoringTaskAsync($body, $monitor_id, $naked = 'true')
    {
        return $this->updateMonitoringTaskAsyncWithHttpInfo($body, $monitor_id, $naked)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateMonitoringTaskAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Agave\Client\Model\MonitoringTaskSummary $body The description of the app to add or update. This can be either a file upload or json posted to the request body. (required)
     * @param  string $monitor_id The id of the monitor to update (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateMonitoringTaskAsyncWithHttpInfo($body, $monitor_id, $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\MonitoringTaskDetails';
        $request = $this->updateMonitoringTaskRequest($body, $monitor_id, $naked);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateMonitoringTask'
     *
     * @param  \Agave\Client\Model\MonitoringTaskSummary $body The description of the app to add or update. This can be either a file upload or json posted to the request body. (required)
     * @param  string $monitor_id The id of the monitor to update (required)
     * @param  bool $naked (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateMonitoringTaskRequest($body, $monitor_id, $naked = 'true')
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateMonitoringTask'
            );
        }
        // verify the required parameter 'monitor_id' is set
        if ($monitor_id === null || (is_array($monitor_id) && count($monitor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $monitor_id when calling updateMonitoringTask'
            );
        }

        $resourcePath = '/monitors/v2/{monitorId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }

        // path params
        if ($monitor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'monitorId' . '}',
                ObjectSerializer::toPathValue($monitor_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
