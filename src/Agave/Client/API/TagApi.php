<?php
/**
 * TagApi
 * PHP version 5
 *
 * @category Class
 * @package  Agave\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Agave Platform Science API
 *
 * Power your digital lab and reduce the time from theory to discovery using the Agave Science-as-a-Service API Platform. Agave provides hosted services that allow researchers to manage data, conduct experiments, and publish and share results from anywhere at any time.
 *
 * OpenAPI spec version: 2.2.14
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Agave\Client\API;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Agave\Client\ApiException;
use Agave\Client\Configuration;
use Agave\Client\HeaderSelector;
use Agave\Client\ObjectSerializer;

/**
 * TagApi Class Doc Comment
 *
 * @category Class
 * @package  Agave\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TagApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param Configuration   $config
     * @param ClientInterface $client
     * @param HeaderSelector  $selector
     */
    public function __construct(
        Configuration $config = null,
        ClientInterface $client = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addTag
     *
     * Creat a new tag
     *
     * @param  \Agave\Client\Model\Tag $body JSON Tag object (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Agave\Client\Model\Tag
     */
    public function addTag($body, $naked = 'true')
    {
        list($response) = $this->addTagWithHttpInfo($body, $naked);
        return $response;
    }

    /**
     * Operation addTagWithHttpInfo
     *
     * Creat a new tag
     *
     * @param  \Agave\Client\Model\Tag $body JSON Tag object (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Agave\Client\Model\Tag, HTTP status code, HTTP response headers (array of strings)
     */
    public function addTagWithHttpInfo($body, $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\Tag';
        $request = $this->addTagRequest($body, $naked);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Agave\Client\Model\Tag',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addTagAsync
     *
     * Creat a new tag
     *
     * @param  \Agave\Client\Model\Tag $body JSON Tag object (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addTagAsync($body, $naked = 'true')
    {
        return $this->addTagAsyncWithHttpInfo($body, $naked)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addTagAsyncWithHttpInfo
     *
     * Creat a new tag
     *
     * @param  \Agave\Client\Model\Tag $body JSON Tag object (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addTagAsyncWithHttpInfo($body, $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\Tag';
        $request = $this->addTagRequest($body, $naked);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addTag'
     *
     * @param  \Agave\Client\Model\Tag $body JSON Tag object (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addTagRequest($body, $naked = 'true')
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling addTag'
            );
        }

        $resourcePath = '/tags/v2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addTagResource
     *
     * Add resources to tag
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  \Agave\Client\Model\TagResource $body List of resource uuid to add (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Agave\Client\Model\Tag[]
     */
    public function addTagResource($tag_id, $body, $naked = 'true')
    {
        list($response) = $this->addTagResourceWithHttpInfo($tag_id, $body, $naked);
        return $response;
    }

    /**
     * Operation addTagResourceWithHttpInfo
     *
     * Add resources to tag
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  \Agave\Client\Model\TagResource $body List of resource uuid to add (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Agave\Client\Model\Tag[], HTTP status code, HTTP response headers (array of strings)
     */
    public function addTagResourceWithHttpInfo($tag_id, $body, $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\Tag[]';
        $request = $this->addTagResourceRequest($tag_id, $body, $naked);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Agave\Client\Model\Tag[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addTagResourceAsync
     *
     * Add resources to tag
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  \Agave\Client\Model\TagResource $body List of resource uuid to add (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addTagResourceAsync($tag_id, $body, $naked = 'true')
    {
        return $this->addTagResourceAsyncWithHttpInfo($tag_id, $body, $naked)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addTagResourceAsyncWithHttpInfo
     *
     * Add resources to tag
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  \Agave\Client\Model\TagResource $body List of resource uuid to add (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addTagResourceAsyncWithHttpInfo($tag_id, $body, $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\Tag[]';
        $request = $this->addTagResourceRequest($tag_id, $body, $naked);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addTagResource'
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  \Agave\Client\Model\TagResource $body List of resource uuid to add (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addTagResourceRequest($tag_id, $body, $naked = 'true')
    {
        // verify the required parameter 'tag_id' is set
        if ($tag_id === null || (is_array($tag_id) && count($tag_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag_id when calling addTagResource'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling addTagResource'
            );
        }

        $resourcePath = '/tags/v2/{tagId}/resources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }

        // path params
        if ($tag_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tagId' . '}',
                ObjectSerializer::toPathValue($tag_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation clearTagPermissions
     *
     * Clear tag permissions
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function clearTagPermissions($tag_id, $naked = 'true')
    {
        $this->clearTagPermissionsWithHttpInfo($tag_id, $naked);
    }

    /**
     * Operation clearTagPermissionsWithHttpInfo
     *
     * Clear tag permissions
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function clearTagPermissionsWithHttpInfo($tag_id, $naked = 'true')
    {
        $returnType = '';
        $request = $this->clearTagPermissionsRequest($tag_id, $naked);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation clearTagPermissionsAsync
     *
     * Clear tag permissions
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clearTagPermissionsAsync($tag_id, $naked = 'true')
    {
        return $this->clearTagPermissionsAsyncWithHttpInfo($tag_id, $naked)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation clearTagPermissionsAsyncWithHttpInfo
     *
     * Clear tag permissions
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clearTagPermissionsAsyncWithHttpInfo($tag_id, $naked = 'true')
    {
        $returnType = '';
        $request = $this->clearTagPermissionsRequest($tag_id, $naked);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'clearTagPermissions'
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function clearTagPermissionsRequest($tag_id, $naked = 'true')
    {
        // verify the required parameter 'tag_id' is set
        if ($tag_id === null || (is_array($tag_id) && count($tag_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag_id when calling clearTagPermissions'
            );
        }

        $resourcePath = '/tags/v2/{tagId}/pems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }

        // path params
        if ($tag_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tagId' . '}',
                ObjectSerializer::toPathValue($tag_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation clearTagResources
     *
     * Clear all tagged resources
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function clearTagResources($tag_id, $naked = 'true')
    {
        $this->clearTagResourcesWithHttpInfo($tag_id, $naked);
    }

    /**
     * Operation clearTagResourcesWithHttpInfo
     *
     * Clear all tagged resources
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function clearTagResourcesWithHttpInfo($tag_id, $naked = 'true')
    {
        $returnType = '';
        $request = $this->clearTagResourcesRequest($tag_id, $naked);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation clearTagResourcesAsync
     *
     * Clear all tagged resources
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clearTagResourcesAsync($tag_id, $naked = 'true')
    {
        return $this->clearTagResourcesAsyncWithHttpInfo($tag_id, $naked)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation clearTagResourcesAsyncWithHttpInfo
     *
     * Clear all tagged resources
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clearTagResourcesAsyncWithHttpInfo($tag_id, $naked = 'true')
    {
        $returnType = '';
        $request = $this->clearTagResourcesRequest($tag_id, $naked);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'clearTagResources'
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function clearTagResourcesRequest($tag_id, $naked = 'true')
    {
        // verify the required parameter 'tag_id' is set
        if ($tag_id === null || (is_array($tag_id) && count($tag_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag_id when calling clearTagResources'
            );
        }

        $resourcePath = '/tags/v2/{tagId}/resources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }

        // path params
        if ($tag_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tagId' . '}',
                ObjectSerializer::toPathValue($tag_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteTag
     *
     * Delete tag
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteTag($tag_id, $naked = 'true')
    {
        $this->deleteTagWithHttpInfo($tag_id, $naked);
    }

    /**
     * Operation deleteTagWithHttpInfo
     *
     * Delete tag
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTagWithHttpInfo($tag_id, $naked = 'true')
    {
        $returnType = '';
        $request = $this->deleteTagRequest($tag_id, $naked);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteTagAsync
     *
     * Delete tag
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTagAsync($tag_id, $naked = 'true')
    {
        return $this->deleteTagAsyncWithHttpInfo($tag_id, $naked)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteTagAsyncWithHttpInfo
     *
     * Delete tag
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTagAsyncWithHttpInfo($tag_id, $naked = 'true')
    {
        $returnType = '';
        $request = $this->deleteTagRequest($tag_id, $naked);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteTag'
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteTagRequest($tag_id, $naked = 'true')
    {
        // verify the required parameter 'tag_id' is set
        if ($tag_id === null || (is_array($tag_id) && count($tag_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag_id when calling deleteTag'
            );
        }

        $resourcePath = '/tags/v2/{tagId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }

        // path params
        if ($tag_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tagId' . '}',
                ObjectSerializer::toPathValue($tag_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteTagPermissionForUser
     *
     * Remove user tag permission
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  string $username Username to revoke permission (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteTagPermissionForUser($tag_id, $username, $naked = 'true')
    {
        $this->deleteTagPermissionForUserWithHttpInfo($tag_id, $username, $naked);
    }

    /**
     * Operation deleteTagPermissionForUserWithHttpInfo
     *
     * Remove user tag permission
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  string $username Username to revoke permission (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTagPermissionForUserWithHttpInfo($tag_id, $username, $naked = 'true')
    {
        $returnType = '';
        $request = $this->deleteTagPermissionForUserRequest($tag_id, $username, $naked);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteTagPermissionForUserAsync
     *
     * Remove user tag permission
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  string $username Username to revoke permission (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTagPermissionForUserAsync($tag_id, $username, $naked = 'true')
    {
        return $this->deleteTagPermissionForUserAsyncWithHttpInfo($tag_id, $username, $naked)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteTagPermissionForUserAsyncWithHttpInfo
     *
     * Remove user tag permission
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  string $username Username to revoke permission (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTagPermissionForUserAsyncWithHttpInfo($tag_id, $username, $naked = 'true')
    {
        $returnType = '';
        $request = $this->deleteTagPermissionForUserRequest($tag_id, $username, $naked);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteTagPermissionForUser'
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  string $username Username to revoke permission (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteTagPermissionForUserRequest($tag_id, $username, $naked = 'true')
    {
        // verify the required parameter 'tag_id' is set
        if ($tag_id === null || (is_array($tag_id) && count($tag_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag_id when calling deleteTagPermissionForUser'
            );
        }
        // verify the required parameter 'username' is set
        if ($username === null || (is_array($username) && count($username) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $username when calling deleteTagPermissionForUser'
            );
        }

        $resourcePath = '/tags/v2/{tagId}/pems/{username}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }

        // path params
        if ($tag_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tagId' . '}',
                ObjectSerializer::toPathValue($tag_id),
                $resourcePath
            );
        }
        // path params
        if ($username !== null) {
            $resourcePath = str_replace(
                '{' . 'username' . '}',
                ObjectSerializer::toPathValue($username),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTagDetails
     *
     * Tag Details
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Agave\Client\Model\Tag
     */
    public function getTagDetails($tag_id, $naked = 'true')
    {
        list($response) = $this->getTagDetailsWithHttpInfo($tag_id, $naked);
        return $response;
    }

    /**
     * Operation getTagDetailsWithHttpInfo
     *
     * Tag Details
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Agave\Client\Model\Tag, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTagDetailsWithHttpInfo($tag_id, $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\Tag';
        $request = $this->getTagDetailsRequest($tag_id, $naked);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Agave\Client\Model\Tag',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTagDetailsAsync
     *
     * Tag Details
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTagDetailsAsync($tag_id, $naked = 'true')
    {
        return $this->getTagDetailsAsyncWithHttpInfo($tag_id, $naked)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTagDetailsAsyncWithHttpInfo
     *
     * Tag Details
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTagDetailsAsyncWithHttpInfo($tag_id, $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\Tag';
        $request = $this->getTagDetailsRequest($tag_id, $naked);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTagDetails'
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTagDetailsRequest($tag_id, $naked = 'true')
    {
        // verify the required parameter 'tag_id' is set
        if ($tag_id === null || (is_array($tag_id) && count($tag_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag_id when calling getTagDetails'
            );
        }

        $resourcePath = '/tags/v2/{tagId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }

        // path params
        if ($tag_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tagId' . '}',
                ObjectSerializer::toPathValue($tag_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTagPermissionForUser
     *
     * List tag permissions for a user
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  string $username Valid username (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Agave\Client\Model\Permission[]
     */
    public function getTagPermissionForUser($tag_id, $username, $naked = 'true')
    {
        list($response) = $this->getTagPermissionForUserWithHttpInfo($tag_id, $username, $naked);
        return $response;
    }

    /**
     * Operation getTagPermissionForUserWithHttpInfo
     *
     * List tag permissions for a user
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  string $username Valid username (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Agave\Client\Model\Permission[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTagPermissionForUserWithHttpInfo($tag_id, $username, $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\Permission[]';
        $request = $this->getTagPermissionForUserRequest($tag_id, $username, $naked);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Agave\Client\Model\Permission[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTagPermissionForUserAsync
     *
     * List tag permissions for a user
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  string $username Valid username (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTagPermissionForUserAsync($tag_id, $username, $naked = 'true')
    {
        return $this->getTagPermissionForUserAsyncWithHttpInfo($tag_id, $username, $naked)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTagPermissionForUserAsyncWithHttpInfo
     *
     * List tag permissions for a user
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  string $username Valid username (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTagPermissionForUserAsyncWithHttpInfo($tag_id, $username, $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\Permission[]';
        $request = $this->getTagPermissionForUserRequest($tag_id, $username, $naked);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTagPermissionForUser'
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  string $username Valid username (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTagPermissionForUserRequest($tag_id, $username, $naked = 'true')
    {
        // verify the required parameter 'tag_id' is set
        if ($tag_id === null || (is_array($tag_id) && count($tag_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag_id when calling getTagPermissionForUser'
            );
        }
        // verify the required parameter 'username' is set
        if ($username === null || (is_array($username) && count($username) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $username when calling getTagPermissionForUser'
            );
        }

        $resourcePath = '/tags/v2/{tagId}/pems/{username}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }

        // path params
        if ($tag_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tagId' . '}',
                ObjectSerializer::toPathValue($tag_id),
                $resourcePath
            );
        }
        // path params
        if ($username !== null) {
            $resourcePath = str_replace(
                '{' . 'username' . '}',
                ObjectSerializer::toPathValue($username),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTaggedResource
     *
     * Get tagged item details
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  string $uuid Unique id of a resource (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Agave\Client\Model\TagResource
     */
    public function getTaggedResource($tag_id, $uuid, $naked = 'true')
    {
        list($response) = $this->getTaggedResourceWithHttpInfo($tag_id, $uuid, $naked);
        return $response;
    }

    /**
     * Operation getTaggedResourceWithHttpInfo
     *
     * Get tagged item details
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  string $uuid Unique id of a resource (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Agave\Client\Model\TagResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTaggedResourceWithHttpInfo($tag_id, $uuid, $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\TagResource';
        $request = $this->getTaggedResourceRequest($tag_id, $uuid, $naked);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Agave\Client\Model\TagResource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTaggedResourceAsync
     *
     * Get tagged item details
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  string $uuid Unique id of a resource (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTaggedResourceAsync($tag_id, $uuid, $naked = 'true')
    {
        return $this->getTaggedResourceAsyncWithHttpInfo($tag_id, $uuid, $naked)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTaggedResourceAsyncWithHttpInfo
     *
     * Get tagged item details
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  string $uuid Unique id of a resource (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTaggedResourceAsyncWithHttpInfo($tag_id, $uuid, $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\TagResource';
        $request = $this->getTaggedResourceRequest($tag_id, $uuid, $naked);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTaggedResource'
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  string $uuid Unique id of a resource (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTaggedResourceRequest($tag_id, $uuid, $naked = 'true')
    {
        // verify the required parameter 'tag_id' is set
        if ($tag_id === null || (is_array($tag_id) && count($tag_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag_id when calling getTaggedResource'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling getTaggedResource'
            );
        }

        $resourcePath = '/tags/v2/{tagId}/resources/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }

        // path params
        if ($tag_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tagId' . '}',
                ObjectSerializer::toPathValue($tag_id),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listTagHistory
     *
     * Tag history
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     * @param  int $limit Maximum number of responses. Default 100 (optional, default to 100)
     * @param  int $offset Number of results to skip by default (optional, default to 0)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Agave\Client\Model\TagHistory[]
     */
    public function listTagHistory($tag_id, $naked = 'true', $limit = '100', $offset = '0')
    {
        list($response) = $this->listTagHistoryWithHttpInfo($tag_id, $naked, $limit, $offset);
        return $response;
    }

    /**
     * Operation listTagHistoryWithHttpInfo
     *
     * Tag history
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     * @param  int $limit Maximum number of responses. Default 100 (optional, default to 100)
     * @param  int $offset Number of results to skip by default (optional, default to 0)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Agave\Client\Model\TagHistory[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listTagHistoryWithHttpInfo($tag_id, $naked = 'true', $limit = '100', $offset = '0')
    {
        $returnType = '\Agave\Client\Model\TagHistory[]';
        $request = $this->listTagHistoryRequest($tag_id, $naked, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Agave\Client\Model\TagHistory[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listTagHistoryAsync
     *
     * Tag history
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     * @param  int $limit Maximum number of responses. Default 100 (optional, default to 100)
     * @param  int $offset Number of results to skip by default (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTagHistoryAsync($tag_id, $naked = 'true', $limit = '100', $offset = '0')
    {
        return $this->listTagHistoryAsyncWithHttpInfo($tag_id, $naked, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listTagHistoryAsyncWithHttpInfo
     *
     * Tag history
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     * @param  int $limit Maximum number of responses. Default 100 (optional, default to 100)
     * @param  int $offset Number of results to skip by default (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTagHistoryAsyncWithHttpInfo($tag_id, $naked = 'true', $limit = '100', $offset = '0')
    {
        $returnType = '\Agave\Client\Model\TagHistory[]';
        $request = $this->listTagHistoryRequest($tag_id, $naked, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listTagHistory'
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     * @param  int $limit Maximum number of responses. Default 100 (optional, default to 100)
     * @param  int $offset Number of results to skip by default (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listTagHistoryRequest($tag_id, $naked = 'true', $limit = '100', $offset = '0')
    {
        // verify the required parameter 'tag_id' is set
        if ($tag_id === null || (is_array($tag_id) && count($tag_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag_id when calling listTagHistory'
            );
        }

        $resourcePath = '/tags/v2/{tagId}/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }

        // path params
        if ($tag_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tagId' . '}',
                ObjectSerializer::toPathValue($tag_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listTagPermissions
     *
     * List permissionss set for a given tag id
     *
     * @param  string $tag_id Unique id of the system (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     * @param  int $limit Maximum number of responses. Default 100 (optional, default to 100)
     * @param  int $offset Number of results to skip by default (optional, default to 0)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Agave\Client\Model\Permission[]
     */
    public function listTagPermissions($tag_id, $naked = 'true', $limit = '100', $offset = '0')
    {
        list($response) = $this->listTagPermissionsWithHttpInfo($tag_id, $naked, $limit, $offset);
        return $response;
    }

    /**
     * Operation listTagPermissionsWithHttpInfo
     *
     * List permissionss set for a given tag id
     *
     * @param  string $tag_id Unique id of the system (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     * @param  int $limit Maximum number of responses. Default 100 (optional, default to 100)
     * @param  int $offset Number of results to skip by default (optional, default to 0)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Agave\Client\Model\Permission[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listTagPermissionsWithHttpInfo($tag_id, $naked = 'true', $limit = '100', $offset = '0')
    {
        $returnType = '\Agave\Client\Model\Permission[]';
        $request = $this->listTagPermissionsRequest($tag_id, $naked, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Agave\Client\Model\Permission[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listTagPermissionsAsync
     *
     * List permissionss set for a given tag id
     *
     * @param  string $tag_id Unique id of the system (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     * @param  int $limit Maximum number of responses. Default 100 (optional, default to 100)
     * @param  int $offset Number of results to skip by default (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTagPermissionsAsync($tag_id, $naked = 'true', $limit = '100', $offset = '0')
    {
        return $this->listTagPermissionsAsyncWithHttpInfo($tag_id, $naked, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listTagPermissionsAsyncWithHttpInfo
     *
     * List permissionss set for a given tag id
     *
     * @param  string $tag_id Unique id of the system (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     * @param  int $limit Maximum number of responses. Default 100 (optional, default to 100)
     * @param  int $offset Number of results to skip by default (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTagPermissionsAsyncWithHttpInfo($tag_id, $naked = 'true', $limit = '100', $offset = '0')
    {
        $returnType = '\Agave\Client\Model\Permission[]';
        $request = $this->listTagPermissionsRequest($tag_id, $naked, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listTagPermissions'
     *
     * @param  string $tag_id Unique id of the system (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     * @param  int $limit Maximum number of responses. Default 100 (optional, default to 100)
     * @param  int $offset Number of results to skip by default (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listTagPermissionsRequest($tag_id, $naked = 'true', $limit = '100', $offset = '0')
    {
        // verify the required parameter 'tag_id' is set
        if ($tag_id === null || (is_array($tag_id) && count($tag_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag_id when calling listTagPermissions'
            );
        }

        $resourcePath = '/tags/v2/{tagId}/pems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }

        // path params
        if ($tag_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tagId' . '}',
                ObjectSerializer::toPathValue($tag_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listTagResources
     *
     * Tagged items
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     * @param  int $limit Maximum number of responses. Default 100 (optional, default to 100)
     * @param  int $offset Number of results to skip by default (optional, default to 0)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Agave\Client\Model\TagResource[]
     */
    public function listTagResources($tag_id, $naked = 'true', $limit = '100', $offset = '0')
    {
        list($response) = $this->listTagResourcesWithHttpInfo($tag_id, $naked, $limit, $offset);
        return $response;
    }

    /**
     * Operation listTagResourcesWithHttpInfo
     *
     * Tagged items
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     * @param  int $limit Maximum number of responses. Default 100 (optional, default to 100)
     * @param  int $offset Number of results to skip by default (optional, default to 0)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Agave\Client\Model\TagResource[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listTagResourcesWithHttpInfo($tag_id, $naked = 'true', $limit = '100', $offset = '0')
    {
        $returnType = '\Agave\Client\Model\TagResource[]';
        $request = $this->listTagResourcesRequest($tag_id, $naked, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Agave\Client\Model\TagResource[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listTagResourcesAsync
     *
     * Tagged items
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     * @param  int $limit Maximum number of responses. Default 100 (optional, default to 100)
     * @param  int $offset Number of results to skip by default (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTagResourcesAsync($tag_id, $naked = 'true', $limit = '100', $offset = '0')
    {
        return $this->listTagResourcesAsyncWithHttpInfo($tag_id, $naked, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listTagResourcesAsyncWithHttpInfo
     *
     * Tagged items
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     * @param  int $limit Maximum number of responses. Default 100 (optional, default to 100)
     * @param  int $offset Number of results to skip by default (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTagResourcesAsyncWithHttpInfo($tag_id, $naked = 'true', $limit = '100', $offset = '0')
    {
        $returnType = '\Agave\Client\Model\TagResource[]';
        $request = $this->listTagResourcesRequest($tag_id, $naked, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listTagResources'
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     * @param  int $limit Maximum number of responses. Default 100 (optional, default to 100)
     * @param  int $offset Number of results to skip by default (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listTagResourcesRequest($tag_id, $naked = 'true', $limit = '100', $offset = '0')
    {
        // verify the required parameter 'tag_id' is set
        if ($tag_id === null || (is_array($tag_id) && count($tag_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag_id when calling listTagResources'
            );
        }

        $resourcePath = '/tags/v2/{tagId}/resources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }

        // path params
        if ($tag_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tagId' . '}',
                ObjectSerializer::toPathValue($tag_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listTags
     *
     * Available tags
     *
     * @param  string $name Name of the tag for which to search (optional)
     * @param  string $resource_type Search for tags associated with one or resources of named type (optional)
     * @param  string $resource_id Id of tagged resource (optional)
     * @param  string $last_modified Date at which tag was modified in ISO8601 format (optional)
     * @param  string $created Date at which tag was created in ISO8601 format (optional)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     * @param  int $limit Maximum number of responses. Default 100 (optional, default to 100)
     * @param  int $offset Number of results to skip by default (optional, default to 0)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Agave\Client\Model\TagSummary[]
     */
    public function listTags($name = null, $resource_type = null, $resource_id = null, $last_modified = null, $created = null, $naked = 'true', $limit = '100', $offset = '0')
    {
        list($response) = $this->listTagsWithHttpInfo($name, $resource_type, $resource_id, $last_modified, $created, $naked, $limit, $offset);
        return $response;
    }

    /**
     * Operation listTagsWithHttpInfo
     *
     * Available tags
     *
     * @param  string $name Name of the tag for which to search (optional)
     * @param  string $resource_type Search for tags associated with one or resources of named type (optional)
     * @param  string $resource_id Id of tagged resource (optional)
     * @param  string $last_modified Date at which tag was modified in ISO8601 format (optional)
     * @param  string $created Date at which tag was created in ISO8601 format (optional)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     * @param  int $limit Maximum number of responses. Default 100 (optional, default to 100)
     * @param  int $offset Number of results to skip by default (optional, default to 0)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Agave\Client\Model\TagSummary[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listTagsWithHttpInfo($name = null, $resource_type = null, $resource_id = null, $last_modified = null, $created = null, $naked = 'true', $limit = '100', $offset = '0')
    {
        $returnType = '\Agave\Client\Model\TagSummary[]';
        $request = $this->listTagsRequest($name, $resource_type, $resource_id, $last_modified, $created, $naked, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Agave\Client\Model\TagSummary[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listTagsAsync
     *
     * Available tags
     *
     * @param  string $name Name of the tag for which to search (optional)
     * @param  string $resource_type Search for tags associated with one or resources of named type (optional)
     * @param  string $resource_id Id of tagged resource (optional)
     * @param  string $last_modified Date at which tag was modified in ISO8601 format (optional)
     * @param  string $created Date at which tag was created in ISO8601 format (optional)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     * @param  int $limit Maximum number of responses. Default 100 (optional, default to 100)
     * @param  int $offset Number of results to skip by default (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTagsAsync($name = null, $resource_type = null, $resource_id = null, $last_modified = null, $created = null, $naked = 'true', $limit = '100', $offset = '0')
    {
        return $this->listTagsAsyncWithHttpInfo($name, $resource_type, $resource_id, $last_modified, $created, $naked, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listTagsAsyncWithHttpInfo
     *
     * Available tags
     *
     * @param  string $name Name of the tag for which to search (optional)
     * @param  string $resource_type Search for tags associated with one or resources of named type (optional)
     * @param  string $resource_id Id of tagged resource (optional)
     * @param  string $last_modified Date at which tag was modified in ISO8601 format (optional)
     * @param  string $created Date at which tag was created in ISO8601 format (optional)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     * @param  int $limit Maximum number of responses. Default 100 (optional, default to 100)
     * @param  int $offset Number of results to skip by default (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTagsAsyncWithHttpInfo($name = null, $resource_type = null, $resource_id = null, $last_modified = null, $created = null, $naked = 'true', $limit = '100', $offset = '0')
    {
        $returnType = '\Agave\Client\Model\TagSummary[]';
        $request = $this->listTagsRequest($name, $resource_type, $resource_id, $last_modified, $created, $naked, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listTags'
     *
     * @param  string $name Name of the tag for which to search (optional)
     * @param  string $resource_type Search for tags associated with one or resources of named type (optional)
     * @param  string $resource_id Id of tagged resource (optional)
     * @param  string $last_modified Date at which tag was modified in ISO8601 format (optional)
     * @param  string $created Date at which tag was created in ISO8601 format (optional)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     * @param  int $limit Maximum number of responses. Default 100 (optional, default to 100)
     * @param  int $offset Number of results to skip by default (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listTagsRequest($name = null, $resource_type = null, $resource_id = null, $last_modified = null, $created = null, $naked = 'true', $limit = '100', $offset = '0')
    {

        $resourcePath = '/tags/v2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($resource_type !== null) {
            $queryParams['resourceType'] = ObjectSerializer::toQueryValue($resource_type);
        }
        // query params
        if ($resource_id !== null) {
            $queryParams['resourceId'] = ObjectSerializer::toQueryValue($resource_id);
        }
        // query params
        if ($last_modified !== null) {
            $queryParams['lastModified'] = ObjectSerializer::toQueryValue($last_modified);
        }
        // query params
        if ($created !== null) {
            $queryParams['created'] = ObjectSerializer::toQueryValue($created);
        }
        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeTagResource
     *
     * Remove resource from tag
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  string $uuid UUID of the resource to delete (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeTagResource($tag_id, $uuid, $naked = 'true')
    {
        $this->removeTagResourceWithHttpInfo($tag_id, $uuid, $naked);
    }

    /**
     * Operation removeTagResourceWithHttpInfo
     *
     * Remove resource from tag
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  string $uuid UUID of the resource to delete (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeTagResourceWithHttpInfo($tag_id, $uuid, $naked = 'true')
    {
        $returnType = '';
        $request = $this->removeTagResourceRequest($tag_id, $uuid, $naked);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeTagResourceAsync
     *
     * Remove resource from tag
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  string $uuid UUID of the resource to delete (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeTagResourceAsync($tag_id, $uuid, $naked = 'true')
    {
        return $this->removeTagResourceAsyncWithHttpInfo($tag_id, $uuid, $naked)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeTagResourceAsyncWithHttpInfo
     *
     * Remove resource from tag
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  string $uuid UUID of the resource to delete (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeTagResourceAsyncWithHttpInfo($tag_id, $uuid, $naked = 'true')
    {
        $returnType = '';
        $request = $this->removeTagResourceRequest($tag_id, $uuid, $naked);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeTagResource'
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  string $uuid UUID of the resource to delete (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function removeTagResourceRequest($tag_id, $uuid, $naked = 'true')
    {
        // verify the required parameter 'tag_id' is set
        if ($tag_id === null || (is_array($tag_id) && count($tag_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag_id when calling removeTagResource'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling removeTagResource'
            );
        }

        $resourcePath = '/tags/v2/{tagId}/resources/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }

        // path params
        if ($tag_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tagId' . '}',
                ObjectSerializer::toPathValue($tag_id),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTag
     *
     * Update tag
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  \Agave\Client\Model\Tag $body JSON Tag object (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Agave\Client\Model\Tag
     */
    public function updateTag($tag_id, $body, $naked = 'true')
    {
        list($response) = $this->updateTagWithHttpInfo($tag_id, $body, $naked);
        return $response;
    }

    /**
     * Operation updateTagWithHttpInfo
     *
     * Update tag
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  \Agave\Client\Model\Tag $body JSON Tag object (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Agave\Client\Model\Tag, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTagWithHttpInfo($tag_id, $body, $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\Tag';
        $request = $this->updateTagRequest($tag_id, $body, $naked);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Agave\Client\Model\Tag',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateTagAsync
     *
     * Update tag
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  \Agave\Client\Model\Tag $body JSON Tag object (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTagAsync($tag_id, $body, $naked = 'true')
    {
        return $this->updateTagAsyncWithHttpInfo($tag_id, $body, $naked)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateTagAsyncWithHttpInfo
     *
     * Update tag
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  \Agave\Client\Model\Tag $body JSON Tag object (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTagAsyncWithHttpInfo($tag_id, $body, $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\Tag';
        $request = $this->updateTagRequest($tag_id, $body, $naked);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTag'
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  \Agave\Client\Model\Tag $body JSON Tag object (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateTagRequest($tag_id, $body, $naked = 'true')
    {
        // verify the required parameter 'tag_id' is set
        if ($tag_id === null || (is_array($tag_id) && count($tag_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag_id when calling updateTag'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateTag'
            );
        }

        $resourcePath = '/tags/v2/{tagId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }

        // path params
        if ($tag_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tagId' . '}',
                ObjectSerializer::toPathValue($tag_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTagPermission
     *
     * Grant permission
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  \Agave\Client\Model\Permission $body Unique id of a resource (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Agave\Client\Model\Permission
     */
    public function updateTagPermission($tag_id, $body, $naked = 'true')
    {
        list($response) = $this->updateTagPermissionWithHttpInfo($tag_id, $body, $naked);
        return $response;
    }

    /**
     * Operation updateTagPermissionWithHttpInfo
     *
     * Grant permission
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  \Agave\Client\Model\Permission $body Unique id of a resource (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Agave\Client\Model\Permission, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTagPermissionWithHttpInfo($tag_id, $body, $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\Permission';
        $request = $this->updateTagPermissionRequest($tag_id, $body, $naked);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Agave\Client\Model\Permission',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateTagPermissionAsync
     *
     * Grant permission
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  \Agave\Client\Model\Permission $body Unique id of a resource (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTagPermissionAsync($tag_id, $body, $naked = 'true')
    {
        return $this->updateTagPermissionAsyncWithHttpInfo($tag_id, $body, $naked)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateTagPermissionAsyncWithHttpInfo
     *
     * Grant permission
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  \Agave\Client\Model\Permission $body Unique id of a resource (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTagPermissionAsyncWithHttpInfo($tag_id, $body, $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\Permission';
        $request = $this->updateTagPermissionRequest($tag_id, $body, $naked);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTagPermission'
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  \Agave\Client\Model\Permission $body Unique id of a resource (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateTagPermissionRequest($tag_id, $body, $naked = 'true')
    {
        // verify the required parameter 'tag_id' is set
        if ($tag_id === null || (is_array($tag_id) && count($tag_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag_id when calling updateTagPermission'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateTagPermission'
            );
        }

        $resourcePath = '/tags/v2/{tagId}/pems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }

        // path params
        if ($tag_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tagId' . '}',
                ObjectSerializer::toPathValue($tag_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTagPermissionForUser
     *
     * Update user permission on tag
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  string $username Valid username (required)
     * @param  \Agave\Client\Model\Permission $body Valid permission value (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Agave\Client\Model\Permission
     */
    public function updateTagPermissionForUser($tag_id, $username, $body, $naked = 'true')
    {
        list($response) = $this->updateTagPermissionForUserWithHttpInfo($tag_id, $username, $body, $naked);
        return $response;
    }

    /**
     * Operation updateTagPermissionForUserWithHttpInfo
     *
     * Update user permission on tag
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  string $username Valid username (required)
     * @param  \Agave\Client\Model\Permission $body Valid permission value (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Agave\Client\Model\Permission, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTagPermissionForUserWithHttpInfo($tag_id, $username, $body, $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\Permission';
        $request = $this->updateTagPermissionForUserRequest($tag_id, $username, $body, $naked);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Agave\Client\Model\Permission',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateTagPermissionForUserAsync
     *
     * Update user permission on tag
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  string $username Valid username (required)
     * @param  \Agave\Client\Model\Permission $body Valid permission value (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTagPermissionForUserAsync($tag_id, $username, $body, $naked = 'true')
    {
        return $this->updateTagPermissionForUserAsyncWithHttpInfo($tag_id, $username, $body, $naked)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateTagPermissionForUserAsyncWithHttpInfo
     *
     * Update user permission on tag
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  string $username Valid username (required)
     * @param  \Agave\Client\Model\Permission $body Valid permission value (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTagPermissionForUserAsyncWithHttpInfo($tag_id, $username, $body, $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\Permission';
        $request = $this->updateTagPermissionForUserRequest($tag_id, $username, $body, $naked);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTagPermissionForUser'
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  string $username Valid username (required)
     * @param  \Agave\Client\Model\Permission $body Valid permission value (required)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateTagPermissionForUserRequest($tag_id, $username, $body, $naked = 'true')
    {
        // verify the required parameter 'tag_id' is set
        if ($tag_id === null || (is_array($tag_id) && count($tag_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag_id when calling updateTagPermissionForUser'
            );
        }
        // verify the required parameter 'username' is set
        if ($username === null || (is_array($username) && count($username) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $username when calling updateTagPermissionForUser'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateTagPermissionForUser'
            );
        }

        $resourcePath = '/tags/v2/{tagId}/pems/{username}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }

        // path params
        if ($tag_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tagId' . '}',
                ObjectSerializer::toPathValue($tag_id),
                $resourcePath
            );
        }
        // path params
        if ($username !== null) {
            $resourcePath = str_replace(
                '{' . 'username' . '}',
                ObjectSerializer::toPathValue($username),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTagResource
     *
     * Add resource to tag
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  string $uuid Unique id of a resource (required)
     * @param  \Agave\Client\Model\TagResource $body empty body (optional)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Agave\Client\Model\TagResource
     */
    public function updateTagResource($tag_id, $uuid, $body = null, $naked = 'true')
    {
        list($response) = $this->updateTagResourceWithHttpInfo($tag_id, $uuid, $body, $naked);
        return $response;
    }

    /**
     * Operation updateTagResourceWithHttpInfo
     *
     * Add resource to tag
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  string $uuid Unique id of a resource (required)
     * @param  \Agave\Client\Model\TagResource $body empty body (optional)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \Agave\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Agave\Client\Model\TagResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTagResourceWithHttpInfo($tag_id, $uuid, $body = null, $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\TagResource';
        $request = $this->updateTagResourceRequest($tag_id, $uuid, $body, $naked);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Agave\Client\Model\TagResource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateTagResourceAsync
     *
     * Add resource to tag
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  string $uuid Unique id of a resource (required)
     * @param  \Agave\Client\Model\TagResource $body empty body (optional)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTagResourceAsync($tag_id, $uuid, $body = null, $naked = 'true')
    {
        return $this->updateTagResourceAsyncWithHttpInfo($tag_id, $uuid, $body, $naked)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateTagResourceAsyncWithHttpInfo
     *
     * Add resource to tag
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  string $uuid Unique id of a resource (required)
     * @param  \Agave\Client\Model\TagResource $body empty body (optional)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTagResourceAsyncWithHttpInfo($tag_id, $uuid, $body = null, $naked = 'true')
    {
        $returnType = '\Agave\Client\Model\TagResource';
        $request = $this->updateTagResourceRequest($tag_id, $uuid, $body, $naked);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTagResource'
     *
     * @param  string $tag_id Unique id of the tag (required)
     * @param  string $uuid Unique id of a resource (required)
     * @param  \Agave\Client\Model\TagResource $body empty body (optional)
     * @param  bool $naked If true return only the payload, not the standard response wrapper (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateTagResourceRequest($tag_id, $uuid, $body = null, $naked = 'true')
    {
        // verify the required parameter 'tag_id' is set
        if ($tag_id === null || (is_array($tag_id) && count($tag_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag_id when calling updateTagResource'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling updateTagResource'
            );
        }

        $resourcePath = '/tags/v2/{tagId}/resources/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($naked !== null) {
            $queryParams['naked'] = ObjectSerializer::toQueryValue($naked);
        }

        // path params
        if ($tag_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tagId' . '}',
                ObjectSerializer::toPathValue($tag_id),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
